{
  "author": "Ben",
  "buildInfo": {
    "buildCommand": "wasm-manager build",
    "buildTime": "2025-06-18T23:27:59+02:00",
    "compilerFlags": [
      "GOOS=js",
      "GOARCH=wasm",
      "CGO_ENABLED=0",
      "-ldflags=-s -w -buildid=",
      "-trimpath",
      "-buildmode=default",
      "-tags=netgo,osusergo",
      "-a",
      "-gcflags=-l=4 -B",
      "wasm-opt=-Oz --enable-bulk-memory"
    ],
    "dependencies": [
      "github.com/golang-jwt/jwt/v5",
      "golang.org/x/crypto"
    ],
    "goModule": true,
    "goVersion": "1.24.3",
    "language": "Go",
    "lastModified": "2025-06-18T23:27:57+02:00",
    "outputFile": "main.wasm",
    "target": "js/wasm",
    "wasmOptUsed": true
  },
  "buildTime": 1750282079,
  "changelog": {
    "changes": [
      "Complete cryptographic suite implementation",
      "Added JWT support with HMAC-SHA256",
      "Integrated bcrypt for password hashing",
      "Added AES-GCM authenticated encryption",
      "RSA key generation and operations",
      "UUID v4 generation support"
    ],
    "releaseDate": "2025-06-17",
    "version": "0.2.1"
  },
  "compatibility": {
    "browsers": [
      "Chrome 57+",
      "Firefox 52+",
      "Safari 11+",
      "Edge 16+"
    ],
    "gowm": "1.0.0+",
    "nodejs": "14.0.0+"
  },
  "description": "Secure cryptographic operations module written in Go and compiled to WebAssembly. Provides comprehensive cryptographic functions with GoWM integration.",
  "ecosystem": {
    "category": "security",
    "industry": [
      "fintech",
      "healthcare",
      "legal",
      "enterprise"
    ],
    "relatedModules": [
      "math-wasm"
    ],
    "subcategory": "cryptography",
    "useCase": [
      "authentication",
      "data-encryption",
      "password-hashing",
      "secure-storage"
    ]
  },
  "errorHandling": {
    "description": "Crypto module returns objects with 'error' field when operations fail",
    "detection": "if (result.error) { /* handle error */ } else { /* use result data */ }",
    "examples": [
      {
        "cause": "Called encryptAES() with malformed base64 key",
        "error": "Invalid key format: illegal base64 data at input byte 7"
      },
      {
        "cause": "Called generateAESKey() when random number generator is unavailable",
        "error": "Failed to generate key: insufficient entropy"
      },
      {
        "cause": "Called verifyJWT() with invalid signature or wrong secret",
        "error": "JWT verification failed: signature is invalid"
      },
      {
        "cause": "Called generateRSAKeyPair() with key size \u003c 1024",
        "error": "RSA key generation failed: key size too small"
      }
    ],
    "pattern": "object-based"
  },
  "examples": [
    {
      "code": "import { loadFromGitHub } from 'gowm';\n\n// Load crypto module from wasm-modules-repository\nconst crypto = await loadFromGitHub('benoitpetit/wasm-modules-repository', {\n  path: 'crypto-wasm',\n  filename: 'main.wasm',\n  name: 'crypto-wasm',\n  branch: 'master'\n});\n\n// Configure module\ncrypto.call('setSilentMode', true);\n\n// Hash operations with error handling\nconst hashResult = crypto.call('hashSHA256', 'Hello World');\nif (hashResult.error) {\n  console.error('Hash error:', hashResult.error);\n} else {\n  console.log('Hash:', hashResult.hash);\n  console.log('Algorithm:', hashResult.algorithm);\n}",
      "language": "javascript",
      "title": "GoWM Integration - Basic Hashing"
    },
    {
      "code": "// Generate AES key\nconst keyResult = crypto.call('generateAESKey', 32); // 256-bit\nif (keyResult.error) {\n  console.error('Key generation failed:', keyResult.error);\n  return;\n}\n\n// Encrypt data\nconst encryptResult = crypto.call('encryptAES', 'Secret message', keyResult.key);\nif (encryptResult.error) {\n  console.error('Encryption failed:', encryptResult.error);\n  return;\n}\n\nconsole.log('Encrypted:', encryptResult.encryptedData);\n\n// Decrypt data\nconst decryptResult = crypto.call('decryptAES', encryptResult.encryptedData, keyResult.key);\nif (decryptResult.error) {\n  console.error('Decryption failed:', decryptResult.error);\n} else {\n  console.log('Decrypted:', decryptResult.decryptedData);\n}",
      "language": "javascript",
      "title": "AES Encryption/Decryption"
    },
    {
      "code": "import React, { useState, useEffect } from 'react';\nimport { useWasmFromGitHub } from 'gowm/hooks/useWasm';\n\nfunction CryptoToolkit() {\n  const { wasm: crypto, loading, error } = useWasmFromGitHub('benoitpetit/wasm-modules-repository', {\n    path: 'crypto-wasm',\n    filename: 'main.wasm',\n    name: 'crypto-wasm',\n    branch: 'master'\n  });\n  \n  const [message, setMessage] = useState('Hello World');\n  const [hashResult, setHashResult] = useState(null);\n  const [functions, setFunctions] = useState([]);\n\n  useEffect(() =\u003e {\n    if (crypto) {\n      crypto.call('setSilentMode', true);\n      const availableFunctions = crypto.call('getAvailableFunctions');\n      setFunctions(availableFunctions);\n    }\n  }, [crypto]);\n\n  const hashMessage = () =\u003e {\n    if (!crypto) return;\n    \n    const result = crypto.call('hashSHA256', message);\n    if (result.error) {\n      setHashResult({ error: result.error });\n    } else {\n      setHashResult(result);\n    }\n  };\n\n  if (loading) return \u003cdiv\u003eLoading crypto module...\u003c/div\u003e;\n  if (error) return \u003cdiv\u003eError: {error.message}\u003c/div\u003e;\n\n  return (\n    \u003cdiv\u003e\n      \u003ch3\u003eCrypto Functions: {functions.length}\u003c/h3\u003e\n      \u003cinput \n        value={message} \n        onChange={(e) =\u003e setMessage(e.target.value)} \n        placeholder=\"Message to hash\" \n      /\u003e\n      \u003cbutton onClick={hashMessage}\u003eHash SHA256\u003c/button\u003e\n      {hashResult \u0026\u0026 (\n        \u003cdiv\u003e\n          {hashResult.error ? (\n            \u003cdiv style={{color: 'red'}}\u003eError: {hashResult.error}\u003c/div\u003e\n          ) : (\n            \u003cdiv\u003e\n              \u003cstrong\u003eHash:\u003c/strong\u003e {hashResult.hash}\u003cbr/\u003e\n              \u003cstrong\u003eAlgorithm:\u003c/strong\u003e {hashResult.algorithm}\n            \u003c/div\u003e\n          )}\n        \u003c/div\u003e\n      )}\n    \u003c/div\u003e\n  );\n}",
      "language": "jsx",
      "title": "React Hook Integration"
    },
    {
      "code": "// Helper function for consistent crypto error handling\nfunction handleCryptoResult(result, successCallback, errorCallback) {\n  if (result.error) {\n    errorCallback(result.error);\n  } else {\n    successCallback(result);\n  }\n}\n\n// Usage examples with different crypto operations\nconst operations = [\n  () =\u003e crypto.call('hashSHA256', 'test data'),\n  () =\u003e crypto.call('generateAESKey', 32),\n  () =\u003e crypto.call('encryptAES', 'data', 'invalid-key'), // Will fail\n  () =\u003e crypto.call('generateUUID')\n];\n\noperations.forEach((operation, index) =\u003e {\n  const result = operation();\n  handleCryptoResult(\n    result,\n    (data) =\u003e console.log(`Operation ${index + 1} success:`, data),\n    (error) =\u003e console.error(`Operation ${index + 1} failed:`, error)\n  );\n});",
      "language": "javascript",
      "title": "Error Handling Patterns"
    }
  ],
  "fileInfo": {
    "binarySize": "5.5 MB",
    "compressedSize": "1.6 MB",
    "compressionRatio": "71%",
    "sourceLines": 675
  },
  "functions": [
    {
      "description": "Generate SHA256 hash of input data",
      "errorPattern": "Returns object with 'error' field on failure",
      "example": "const result = crypto.call('hashSHA256', 'Hello World');\nif (result.error) {\n  console.error('Hash error:', result.error);\n} else {\n  console.log('Hash:', result.hash, 'Algorithm:', result.algorithm);\n}",
      "name": "hashSHA256",
      "parameters": [
        {
          "description": "Data to hash",
          "name": "data",
          "type": "string"
        }
      ],
      "returnType": "object"
    },
    {
      "description": "Generate SHA512 hash of input data",
      "errorPattern": "Returns object with 'error' field on failure",
      "example": "const result = crypto.call('hashSHA512', 'Hello World');\n// Returns: { hash: '...', algorithm: 'SHA512' }",
      "name": "hashSHA512",
      "parameters": [
        {
          "description": "Data to hash",
          "name": "data",
          "type": "string"
        }
      ],
      "returnType": "object"
    },
    {
      "description": "Generate MD5 hash (legacy support only - not secure)",
      "errorPattern": "Returns object with 'error' field on failure",
      "example": "const result = crypto.call('hashMD5', 'Hello World');\n// Includes security warning in response",
      "name": "hashMD5",
      "parameters": [
        {
          "description": "Data to hash",
          "name": "data",
          "type": "string"
        }
      ],
      "returnType": "object"
    },
    {
      "description": "Generate a random AES encryption key",
      "errorPattern": "Returns object with 'error' field on failure",
      "example": "const keyResult = crypto.call('generateAESKey', 32);\nif (keyResult.error) {\n  console.error('Key generation failed:', keyResult.error);\n} else {\n  console.log('Generated key:', keyResult.key, 'Size:', keyResult.keySize);\n}",
      "name": "generateAESKey",
      "parameters": [
        {
          "description": "Key size in bytes (16=128bit, 24=192bit, 32=256bit)",
          "name": "keySize",
          "type": "number"
        }
      ],
      "returnType": "object"
    },
    {
      "description": "Encrypt data using AES-GCM (authenticated encryption)",
      "errorPattern": "Returns object with 'error' field on failure (e.g., invalid key format)",
      "example": "const encryptResult = crypto.call('encryptAES', 'secret data', validKey);\nif (encryptResult.error) {\n  console.error('Encryption failed:', encryptResult.error);\n} else {\n  console.log('Encrypted:', encryptResult.encryptedData, 'Algorithm:', encryptResult.algorithm);\n}",
      "name": "encryptAES",
      "parameters": [
        {
          "description": "Data to encrypt",
          "name": "data",
          "type": "string"
        },
        {
          "description": "Base64-encoded AES key",
          "name": "key",
          "type": "string"
        }
      ],
      "returnType": "object"
    },
    {
      "description": "Decrypt data using AES-GCM",
      "errorPattern": "Returns object with 'error' field on failure",
      "example": "const decryptResult = crypto.call('decryptAES', encryptedData, key);\nif (decryptResult.error) {\n  console.error('Decryption failed:', decryptResult.error);\n} else {\n  console.log('Decrypted:', decryptResult.decryptedData);\n}",
      "name": "decryptAES",
      "parameters": [
        {
          "description": "Base64-encoded encrypted data",
          "name": "encryptedData",
          "type": "string"
        },
        {
          "description": "Base64-encoded AES key",
          "name": "key",
          "type": "string"
        }
      ],
      "returnType": "object"
    },
    {
      "description": "Generate RSA public/private key pair",
      "errorPattern": "Returns object with 'error' field on failure",
      "example": "const keyPair = crypto.call('generateRSAKeyPair', 2048);\nif (keyPair.error) {\n  console.error('Key generation failed:', keyPair.error);\n} else {\n  console.log('Public key:', keyPair.publicKey);\n  console.log('Private key:', keyPair.privateKey);\n}",
      "name": "generateRSAKeyPair",
      "parameters": [
        {
          "description": "Key size in bits (1024-4096)",
          "name": "keySize",
          "type": "number"
        }
      ],
      "returnType": "object"
    },
    {
      "description": "Encrypt data using RSA public key",
      "errorPattern": "Returns object with 'error' field on failure",
      "example": "const encrypted = crypto.call('encryptRSA', 'secret', keyPair.publicKey);",
      "name": "encryptRSA",
      "parameters": [
        {
          "description": "Data to encrypt (limited by key size)",
          "name": "data",
          "type": "string"
        },
        {
          "description": "PEM-formatted RSA public key",
          "name": "publicKey",
          "type": "string"
        }
      ],
      "returnType": "object"
    },
    {
      "description": "Decrypt data using RSA private key",
      "errorPattern": "Returns object with 'error' field on failure",
      "example": "const decrypted = crypto.call('decryptRSA', encrypted.encryptedData, keyPair.privateKey);",
      "name": "decryptRSA",
      "parameters": [
        {
          "description": "Base64-encoded encrypted data",
          "name": "encryptedData",
          "type": "string"
        },
        {
          "description": "PEM-formatted RSA private key",
          "name": "privateKey",
          "type": "string"
        }
      ],
      "returnType": "object"
    },
    {
      "description": "Generate a JWT token with HMAC-SHA256 signature",
      "errorPattern": "Returns object with 'error' field on failure",
      "example": "const jwt = crypto.call('generateJWT', '{\"userId\":123}', 'strong-secret', 24);",
      "name": "generateJWT",
      "parameters": [
        {
          "description": "JSON string of claims to include",
          "name": "payload",
          "type": "string"
        },
        {
          "description": "Secret key for signing",
          "name": "secret",
          "type": "string"
        },
        {
          "description": "Token expiration in hours",
          "name": "expirationHours",
          "type": "number"
        }
      ],
      "returnType": "object"
    },
    {
      "description": "Verify and decode a JWT token",
      "errorPattern": "Returns object with 'error' field on failure",
      "example": "const verification = crypto.call('verifyJWT', jwt.token, 'strong-secret');",
      "name": "verifyJWT",
      "parameters": [
        {
          "description": "JWT token to verify",
          "name": "token",
          "type": "string"
        },
        {
          "description": "Secret key used for signing",
          "name": "secret",
          "type": "string"
        }
      ],
      "returnType": "object"
    },
    {
      "description": "Hash password using bcrypt with salt",
      "errorPattern": "Returns object with 'error' field on failure",
      "example": "const hashed = crypto.call('bcryptHash', 'password123', 12);",
      "name": "bcryptHash",
      "parameters": [
        {
          "description": "Password to hash",
          "name": "password",
          "type": "string"
        },
        {
          "description": "Bcrypt cost factor (10-14 recommended)",
          "name": "cost",
          "type": "number"
        }
      ],
      "returnType": "object"
    },
    {
      "description": "Verify password against bcrypt hash",
      "errorPattern": "Returns object with 'error' field on failure",
      "example": "const verified = crypto.call('bcryptVerify', 'password123', hashed.hash);",
      "name": "bcryptVerify",
      "parameters": [
        {
          "description": "Password to verify",
          "name": "password",
          "type": "string"
        },
        {
          "description": "Bcrypt hash to verify against",
          "name": "hash",
          "type": "string"
        }
      ],
      "returnType": "object"
    },
    {
      "description": "Generate a random UUID v4",
      "errorPattern": "Returns object with 'error' field on failure",
      "example": "const uuid = crypto.call('generateUUID');\nconsole.log('UUID:', uuid.uuid);",
      "name": "generateUUID",
      "parameters": [],
      "returnType": "object"
    },
    {
      "description": "Generate cryptographically secure random bytes",
      "errorPattern": "Returns object with 'error' field on failure",
      "example": "const randomBytes = crypto.call('generateRandomBytes', 32);",
      "name": "generateRandomBytes",
      "parameters": [
        {
          "description": "Number of random bytes to generate",
          "name": "length",
          "type": "number"
        }
      ],
      "returnType": "object"
    },
    {
      "description": "Encode data to base64",
      "errorPattern": "Returns object with 'error' field on failure",
      "example": "const encoded = crypto.call('base64Encode', 'hello world');",
      "name": "base64Encode",
      "parameters": [
        {
          "description": "Data to encode",
          "name": "data",
          "type": "string"
        }
      ],
      "returnType": "object"
    },
    {
      "description": "Decode base64 data",
      "errorPattern": "Returns object with 'error' field on failure",
      "example": "const decoded = crypto.call('base64Decode', 'aGVsbG8gd29ybGQ=');",
      "name": "base64Decode",
      "parameters": [
        {
          "description": "Base64 encoded data",
          "name": "encodedData",
          "type": "string"
        }
      ],
      "returnType": "object"
    },
    {
      "description": "Validate password strength and provide feedback",
      "errorPattern": "Returns object with 'error' field on failure",
      "example": "const validation = crypto.call('validatePasswordStrength', 'MyP@ssw0rd123');",
      "name": "validatePasswordStrength",
      "parameters": [
        {
          "description": "Password to validate",
          "name": "password",
          "type": "string"
        }
      ],
      "returnType": "object"
    },
    {
      "description": "Enable/disable silent mode for console logs",
      "example": "crypto.call('setSilentMode', true); // returns true and enables silent mode",
      "name": "setSilentMode",
      "parameters": [
        {
          "description": "true to enable silent mode, false to disable it",
          "name": "silent",
          "type": "boolean"
        }
      ],
      "returnType": "boolean"
    },
    {
      "description": "Get list of all available functions in the module",
      "example": "const functions = crypto.call('getAvailableFunctions');\nconsole.log('Available functions:', functions);",
      "name": "getAvailableFunctions",
      "parameters": [],
      "returnType": "Array\u003cstring\u003e"
    }
  ],
  "gowmConfig": {
    "autoDetect": true,
    "errorPattern": "object-based",
    "preferredFilename": "main.wasm",
    "readySignal": "__gowm_ready",
    "standardFunctions": [
      "getAvailableFunctions",
      "setSilentMode"
    ],
    "supportedBranches": [
      "master",
      "stable"
    ]
  },
  "gzipSize": 1654742,
  "license": "MIT",
  "name": "crypto-wasm",
  "performance": {
    "features": [
      "Compiled WebAssembly for optimal performance",
      "Native Go crypto implementations",
      "Efficient memory usage",
      "Silent mode for production environments",
      "Optimized for GoWM integration"
    ]
  },
  "quality": {
    "documentation": "complete",
    "maintainability": "high",
    "stability": "stable",
    "testing": "comprehensive"
  },
  "security": {
    "features": [
      "Cryptographically secure random number generation",
      "Memory-safe Go implementation",
      "Industry-standard encryption algorithms",
      "Proper key derivation and management",
      "Protection against timing attacks",
      "Input validation and sanitization",
      "Secure memory handling"
    ]
  },
  "size": 5758028,
  "tags": [
    "cryptography",
    "security",
    "encryption",
    "hashing",
    "jwt",
    "password",
    "aes",
    "rsa",
    "bcrypt",
    "wasm",
    "go",
    "gowm"
  ],
  "types": [
    {
      "description": "Standard result type for crypto operations",
      "details": "Returns object with data on success, or object with 'error' field on failure",
      "name": "CryptoResult",
      "type": "object"
    },
    {
      "description": "Hash operation result",
      "name": "HashResult",
      "properties": {
        "algorithm": "string (hash algorithm used)",
        "error": "string (optional, present on failure)",
        "hash": "string (hex-encoded hash)"
      }
    },
    {
      "description": "Encryption operation result",
      "name": "EncryptionResult",
      "properties": {
        "algorithm": "string (encryption algorithm)",
        "encryptedData": "string (base64-encoded encrypted data)",
        "error": "string (optional, present on failure)",
        "keySize": "number (key size in bits)"
      }
    },
    {
      "description": "RSA key pair generation result",
      "name": "KeyPairResult",
      "properties": {
        "error": "string (optional, present on failure)",
        "keySize": "number (key size in bits)",
        "privateKey": "string (PEM-formatted private key)",
        "publicKey": "string (PEM-formatted public key)"
      }
    }
  ],
  "usageStats": {
    "averageCallTime": "2-10ms",
    "complexity": "intermediate",
    "concurrency": "thread-safe",
    "memoryUsage": "moderate"
  },
  "version": "0.2.1",
  "wasmConfig": {
    "filename": "main.wasm",
    "globalFunctions": true,
    "goWasmExecRequired": true,
    "memoryInitialPages": 512,
    "memoryMaximumPages": 1024,
    "readySignal": "__gowm_ready"
  }
}