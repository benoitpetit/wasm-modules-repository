{
    "name": "crypto-wasm",
    "description": "Secure cryptographic operations module written in Go and compiled to WebAssembly. Provides comprehensive cryptographic functions including hashing, encryption, JWT handling, and password security.",
    "version": "1.0.0",
    "author": "Ben",
    "license": "MIT",
    "tags": [
        "cryptography",
        "security",
        "encryption",
        "hashing",
        "jwt",
        "password",
        "aes",
        "rsa",
        "bcrypt",
        "wasm",
        "go"
    ],
    "functions": [
        {
            "name": "hashSHA256",
            "description": "Generate SHA256 hash of input data",
            "parameters": [
                {
                    "name": "data",
                    "type": "string",
                    "description": "Data to hash"
                }
            ],
            "returnType": "object",
            "example": "const result = hashSHA256('Hello World'); // { hash: 'a591a6d40bf420404a011733cfb7b190d62c65bf0bcda32b57b277d9ad9f146e', algorithm: 'SHA256' }"
        },
        {
            "name": "hashSHA512",
            "description": "Generate SHA512 hash of input data",
            "parameters": [
                {
                    "name": "data",
                    "type": "string",
                    "description": "Data to hash"
                }
            ],
            "returnType": "object",
            "example": "const result = hashSHA512('Hello World'); // { hash: '...', algorithm: 'SHA512' }"
        },
        {
            "name": "hashMD5",
            "description": "Generate MD5 hash (legacy support only - not secure)",
            "parameters": [
                {
                    "name": "data",
                    "type": "string",
                    "description": "Data to hash"
                }
            ],
            "returnType": "object",
            "example": "const result = hashMD5('Hello World'); // Includes security warning"
        },
        {
            "name": "generateAESKey",
            "description": "Generate a random AES encryption key",
            "parameters": [
                {
                    "name": "keySize",
                    "type": "number",
                    "description": "Key size in bytes (16=128bit, 24=192bit, 32=256bit)"
                }
            ],
            "returnType": "object",
            "example": "const key = generateAESKey(32); // 256-bit key"
        },
        {
            "name": "encryptAES",
            "description": "Encrypt data using AES-GCM (authenticated encryption)",
            "parameters": [
                {
                    "name": "data",
                    "type": "string",
                    "description": "Data to encrypt"
                },
                {
                    "name": "key",
                    "type": "string",
                    "description": "Base64-encoded AES key"
                }
            ],
            "returnType": "object",
            "example": "const encrypted = encryptAES('secret data', key.key);"
        },
        {
            "name": "decryptAES",
            "description": "Decrypt data using AES-GCM",
            "parameters": [
                {
                    "name": "encryptedData",
                    "type": "string",
                    "description": "Base64-encoded encrypted data"
                },
                {
                    "name": "key",
                    "type": "string",
                    "description": "Base64-encoded AES key"
                }
            ],
            "returnType": "object",
            "example": "const decrypted = decryptAES(encrypted.encryptedData, key.key);"
        },
        {
            "name": "generateRSAKeyPair",
            "description": "Generate RSA public/private key pair",
            "parameters": [
                {
                    "name": "keySize",
                    "type": "number",
                    "description": "Key size in bits (1024-4096)"
                }
            ],
            "returnType": "object",
            "example": "const keyPair = generateRSAKeyPair(2048);"
        },
        {
            "name": "encryptRSA",
            "description": "Encrypt data using RSA public key",
            "parameters": [
                {
                    "name": "data",
                    "type": "string",
                    "description": "Data to encrypt (limited by key size)"
                },
                {
                    "name": "publicKey",
                    "type": "string",
                    "description": "PEM-formatted RSA public key"
                }
            ],
            "returnType": "object",
            "example": "const encrypted = encryptRSA('secret', keyPair.publicKey);"
        },
        {
            "name": "decryptRSA",
            "description": "Decrypt data using RSA private key",
            "parameters": [
                {
                    "name": "encryptedData",
                    "type": "string",
                    "description": "Base64-encoded encrypted data"
                },
                {
                    "name": "privateKey",
                    "type": "string",
                    "description": "PEM-formatted RSA private key"
                }
            ],
            "returnType": "object",
            "example": "const decrypted = decryptRSA(encrypted.encryptedData, keyPair.privateKey);"
        },
        {
            "name": "generateJWT",
            "description": "Generate a JWT token with HMAC-SHA256 signature",
            "parameters": [
                {
                    "name": "payload",
                    "type": "string",
                    "description": "JSON string of claims to include"
                },
                {
                    "name": "secret",
                    "type": "string",
                    "description": "Secret key for signing"
                },
                {
                    "name": "expirationHours",
                    "type": "number",
                    "description": "Token expiration in hours"
                }
            ],
            "returnType": "object",
            "example": "const jwt = generateJWT('{\"userId\":123}', 'strong-secret', 24);"
        },
        {
            "name": "verifyJWT",
            "description": "Verify and decode a JWT token",
            "parameters": [
                {
                    "name": "token",
                    "type": "string",
                    "description": "JWT token to verify"
                },
                {
                    "name": "secret",
                    "type": "string",
                    "description": "Secret key used for signing"
                }
            ],
            "returnType": "object",
            "example": "const verification = verifyJWT(jwt.token, 'strong-secret');"
        },
        {
            "name": "bcryptHash",
            "description": "Hash password using bcrypt (adaptive hashing)",
            "parameters": [
                {
                    "name": "password",
                    "type": "string",
                    "description": "Password to hash"
                },
                {
                    "name": "cost",
                    "type": "number",
                    "description": "Cost factor (4-31, higher = more secure but slower)"
                }
            ],
            "returnType": "object",
            "example": "const hash = bcryptHash('myPassword', 12);"
        },
        {
            "name": "bcryptVerify",
            "description": "Verify password against bcrypt hash",
            "parameters": [
                {
                    "name": "password",
                    "type": "string",
                    "description": "Password to verify"
                },
                {
                    "name": "hash",
                    "type": "string",
                    "description": "bcrypt hash to verify against"
                }
            ],
            "returnType": "object",
            "example": "const isValid = bcryptVerify('myPassword', hash.hash);"
        },
        {
            "name": "generateUUID",
            "description": "Generate a UUID v4 (random UUID)",
            "parameters": [],
            "returnType": "object",
            "example": "const uuid = generateUUID(); // { uuid: '550e8400-e29b-41d4-a716-446655440000', version: 4 }"
        },
        {
            "name": "generateRandomBytes",
            "description": "Generate cryptographically secure random bytes",
            "parameters": [
                {
                    "name": "length",
                    "type": "number",
                    "description": "Number of bytes to generate (1-1024)"
                }
            ],
            "returnType": "object",
            "example": "const randomBytes = generateRandomBytes(32);"
        },
        {
            "name": "base64Encode",
            "description": "Encode data to base64",
            "parameters": [
                {
                    "name": "data",
                    "type": "string",
                    "description": "Data to encode"
                }
            ],
            "returnType": "object",
            "example": "const encoded = base64Encode('Hello World');"
        },
        {
            "name": "base64Decode",
            "description": "Decode base64 data",
            "parameters": [
                {
                    "name": "encodedData",
                    "type": "string",
                    "description": "Base64-encoded data to decode"
                }
            ],
            "returnType": "object",
            "example": "const decoded = base64Decode(encoded.encoded);"
        },
        {
            "name": "validatePasswordStrength",
            "description": "Validate password strength according to security best practices",
            "parameters": [
                {
                    "name": "password",
                    "type": "string",
                    "description": "Password to validate"
                }
            ],
            "returnType": "object",
            "example": "const validation = validatePasswordStrength('MySecure123!');"
        },
        {
            "name": "setSilentMode",
            "description": "Enable or disable logging output",
            "parameters": [
                {
                    "name": "silent",
                    "type": "boolean",
                    "description": "Whether to enable silent mode"
                }
            ],
            "returnType": "boolean",
            "example": "setSilentMode(true);"
        },
        {
            "name": "getAvailableFunctions",
            "description": "Get list of all available cryptographic functions",
            "parameters": [],
            "returnType": "Array<string>",
            "example": "const functions = getAvailableFunctions();"
        }
    ],
    "types": [
        {
            "name": "CryptoError",
            "description": "Cryptographic operation error",
            "properties": {
                "message": {
                    "type": "string",
                    "description": "Error message describing the cryptographic issue"
                },
                "operation": {
                    "type": "string",
                    "description": "The operation that caused the error"
                }
            }
        },
        {
            "name": "HashResult",
            "description": "Result of a hash operation",
            "properties": {
                "hash": {
                    "type": "string",
                    "description": "The computed hash value"
                },
                "algorithm": {
                    "type": "string",
                    "description": "The hashing algorithm used"
                },
                "warning": {
                    "type": "string",
                    "description": "Security warning if applicable"
                }
            }
        },
        {
            "name": "EncryptionResult",
            "description": "Result of an encryption operation",
            "properties": {
                "encryptedData": {
                    "type": "string",
                    "description": "The encrypted data"
                },
                "algorithm": {
                    "type": "string",
                    "description": "The encryption algorithm used"
                }
            }
        },
        {
            "name": "DecryptionResult",
            "description": "Result of a decryption operation",
            "properties": {
                "decryptedData": {
                    "type": "string",
                    "description": "The decrypted data"
                },
                "algorithm": {
                    "type": "string",
                    "description": "The decryption algorithm used"
                }
            }
        },
        {
            "name": "KeyPairResult",
            "description": "Result of key pair generation",
            "properties": {
                "publicKey": {
                    "type": "string",
                    "description": "The generated public key in PEM format"
                },
                "privateKey": {
                    "type": "string",
                    "description": "The generated private key in PEM format"
                },
                "keySize": {
                    "type": "number",
                    "description": "The key size in bits"
                }
            }
        },
        {
            "name": "JWTResult",
            "description": "Result of JWT token generation",
            "properties": {
                "token": {
                    "type": "string",
                    "description": "The generated JWT token"
                },
                "expiresIn": {
                    "type": "number",
                    "description": "Token expiration time in seconds"
                },
                "algorithm": {
                    "type": "string",
                    "description": "The signing algorithm used"
                }
            }
        },
        {
            "name": "PasswordValidation",
            "description": "Result of password strength validation",
            "properties": {
                "score": {
                    "type": "number",
                    "description": "Password strength score (0-100)"
                },
                "strength": {
                    "type": "string",
                    "description": "Password strength level"
                },
                "issues": {
                    "type": "Array<string>",
                    "description": "List of validation issues"
                },
                "valid": {
                    "type": "boolean",
                    "description": "Whether password meets minimum requirements"
                }
            }
        }
    ],
    "security": {
        "features": [
            "Secure random number generation using OS entropy",
            "Authenticated encryption with AES-GCM mode",
            "Strong password hashing with bcrypt",
            "JWT token security with HMAC-SHA256",
            "Input validation for all cryptographic operations",
            "Memory-safe Go implementation",
            "Protection against timing attacks",
            "Constant-time comparisons where applicable"
        ],
        "cors": "N/A - Cryptographic operations only",
        "ssl": "N/A - No network operations"
    },
    "compatibility": {
        "browsers": [
            "Chrome 57+",
            "Firefox 52+",
            "Safari 11+",
            "Edge 16+"
        ],
        "gowm": "Compatible with gowm npm package manager"
    },
    "performance": {
        "features": [
            "Compiled WebAssembly for optimal performance",
            "Native Go cryptographic implementations",
            "Efficient memory management",
            "Minimal JavaScript overhead",
            "Fast hash computations",
            "Optimized encryption/decryption operations",
            "Hardware acceleration where available"
        ]
    },
    "examples": [
        {
            "title": "Basic Hashing Operations",
            "code": "// Loading the WASM module\nconst go = new Go();\nconst result = await WebAssembly.instantiateStreaming(fetch('main.wasm'), go.importObject);\ngo.run(result.instance);\n\n// Generate hashes\nconst sha256 = hashSHA256('Hello World');\nconst sha512 = hashSHA512('Hello World');\n\nconsole.log('SHA256:', sha256.hash);\nconsole.log('SHA512:', sha512.hash);\n\n// MD5 (with warning)\nconst md5 = hashMD5('Hello World');\nconsole.log('MD5:', md5.hash, 'Warning:', md5.warning);"
        },
        {
            "title": "AES Encryption/Decryption",
            "code": "// Generate a secure AES key\nconst key = generateAESKey(32); // 256-bit key\nconsole.log('Generated key:', key.key);\n\n// Encrypt sensitive data\nconst plaintext = 'This is confidential information';\nconst encrypted = encryptAES(plaintext, key.key);\nconsole.log('Encrypted:', encrypted.encryptedData);\n\n// Decrypt the data\nconst decrypted = decryptAES(encrypted.encryptedData, key.key);\nconsole.log('Decrypted:', decrypted.decryptedData);\n\n// Verify integrity\nif (decrypted.decryptedData === plaintext) {\n  console.log('✅ Encryption/Decryption successful!');\n}"
        },
        {
            "title": "RSA Key Pair and Encryption",
            "code": "// Generate RSA key pair\nconst keyPair = generateRSAKeyPair(2048);\nconsole.log('Public Key:', keyPair.publicKey);\nconsole.log('Private Key:', keyPair.privateKey);\n\n// Encrypt with public key\nconst message = 'Secret message';\nconst rsaEncrypted = encryptRSA(message, keyPair.publicKey);\nconsole.log('RSA Encrypted:', rsaEncrypted.encryptedData);\n\n// Decrypt with private key\nconst rsaDecrypted = decryptRSA(rsaEncrypted.encryptedData, keyPair.privateKey);\nconsole.log('RSA Decrypted:', rsaDecrypted.decryptedData);\n\nif (rsaDecrypted.decryptedData === message) {\n  console.log('✅ RSA Encryption/Decryption successful!');\n}"
        },
        {
            "title": "JWT Token Management",
            "code": "// Create JWT payload\nconst payload = JSON.stringify({\n  userId: 12345,\n  username: 'john_doe',\n  roles: ['user', 'admin'],\n  iat: Math.floor(Date.now() / 1000)\n});\n\n// Generate JWT token\nconst secret = 'my-super-secret-key-change-in-production';\nconst jwt = generateJWT(payload, secret, 24); // 24 hours expiration\nconsole.log('JWT Token:', jwt.token);\nconsole.log('Expires in:', jwt.expiresIn, 'seconds');\n\n// Verify JWT token\nconst verification = verifyJWT(jwt.token, secret);\nif (verification.valid) {\n  const claims = JSON.parse(verification.claims);\n  console.log('✅ Token is valid!');\n  console.log('User ID:', claims.userId);\n  console.log('Username:', claims.username);\n  console.log('Roles:', claims.roles);\n} else {\n  console.log('❌ Token is invalid:', verification.error);\n}"
        },
        {
            "title": "Password Security Best Practices",
            "code": "// Enable silent mode for batch operations\nsetSilentMode(true);\n\n// Validate password strength\nconst password = 'MySecure123!@#';\nconst validation = validatePasswordStrength(password);\n\nconsole.log('Password Validation:');\nconsole.log('  Score:', validation.score + '/100');\nconsole.log('  Strength:', validation.strength);\nconsole.log('  Valid:', validation.valid);\nif (validation.issues.length > 0) {\n  console.log('  Issues:', validation.issues);\n}\n\n// Hash password if it's strong enough\nif (validation.valid) {\n  const hashedPassword = bcryptHash(password, 12); // High cost for security\n  console.log('Password hash:', hashedPassword.hash);\n  \n  // Verify password\n  const isValid = bcryptVerify(password, hashedPassword.hash);\n  console.log('Password verification:', isValid.valid);\n  \n  // Test with wrong password\n  const wrongPassword = bcryptVerify('WrongPassword', hashedPassword.hash);\n  console.log('Wrong password test:', wrongPassword.valid);\n}\n\nsetSilentMode(false);"
        },
        {
            "title": "Utility Functions and Random Generation",
            "code": "// Generate secure random data\nconst randomBytes = generateRandomBytes(32);\nconsole.log('Random bytes:', randomBytes.bytes);\nconsole.log('Length:', randomBytes.length, 'bytes');\n\n// Generate UUID for unique identifiers\nconst uuid = generateUUID();\nconsole.log('UUID:', uuid.uuid);\nconsole.log('Version:', uuid.version);\n\n// Base64 encoding/decoding\nconst originalData = 'This is some data to encode';\nconst encoded = base64Encode(originalData);\nconsole.log('Original:', originalData);\nconsole.log('Encoded:', encoded.encoded);\n\nconst decoded = base64Decode(encoded.encoded);\nconsole.log('Decoded:', decoded.decoded);\nconsole.log('Match:', decoded.decoded === originalData);\n\n// List all available functions\nconst functions = getAvailableFunctions();\nconsole.log('Available functions:', functions);"
        }
    ],
    "buildInfo": {
        "language": "Go",
        "target": "js/wasm",
        "buildCommand": "./build.sh",
        "outputFile": "main.wasm",
        "goModule": true,
        "buildTime": "Generated during build process",
        "compilerFlags": [
            "GOOS=js",
            "GOARCH=wasm"
        ],
        "dependencies": [
            "golang.org/x/crypto",
            "github.com/golang-jwt/jwt/v5"
        ]
    },
    "dependencies": [
        "golang.org/x/crypto",
        "github.com/golang-jwt/jwt/v5"
    ],
    "wasmConfig": {
        "filename": "main.wasm",
        "goWasmExecRequired": true,
        "globalFunctions": true,
        "memoryInitialPages": 256,
        "memoryMaximumPages": 512
    }
}