{
    "name": "goxios-wasm",
    "description": "Secure and complete HTTP client library written in Go and compiled to WebAssembly. Provides an axios-like interface optimized for GoWM integration.",
    "version": "0.2.2",
    "author": "Ben",
    "license": "MIT",
    "tags": [
        "http",
        "client",
        "axios",
        "requests",
        "api",
        "wasm",
        "go",
        "gowm",
        "security"
    ],
    "functions": [
        {
            "name": "get",
            "description": "Make a GET request",
            "parameters": [
                {
                    "name": "url",
                    "type": "string",
                    "description": "The URL to make the request to"
                },
                {
                    "name": "config",
                    "type": "string",
                    "description": "Optional JSON configuration string",
                    "optional": true
                }
            ],
            "returnType": "object",
            "errorPattern": "Returns object with 'error' field on failure",
            "example": "const response = goxios.call('get', 'https://api.example.com/users');\nif (response.error) {\n  console.error('GET request failed:', response.error);\n} else {\n  console.log('Status:', response.status, 'Data:', response.data);\n}"
        },
        {
            "name": "post",
            "description": "Make a POST request",
            "parameters": [
                {
                    "name": "url",
                    "type": "string",
                    "description": "The URL to make the request to"
                },
                {
                    "name": "data",
                    "type": "string",
                    "description": "JSON data to send in the request body",
                    "optional": true
                },
                {
                    "name": "config",
                    "type": "string",
                    "description": "Optional JSON configuration string",
                    "optional": true
                }
            ],
            "returnType": "object",
            "errorPattern": "Returns object with 'error' field on failure",
            "example": "const response = goxios.call('post', 'https://api.example.com/users', JSON.stringify({name: 'John'}));\nif (response.error) {\n  console.error('POST failed:', response.error);\n} else {\n  console.log('Created user:', response.data);\n}"
        },
        {
            "name": "put",
            "description": "Make a PUT request",
            "parameters": [
                {
                    "name": "url",
                    "type": "string",
                    "description": "The URL to make the request to"
                },
                {
                    "name": "data",
                    "type": "string",
                    "description": "JSON data to send in the request body",
                    "optional": true
                },
                {
                    "name": "config",
                    "type": "string",
                    "description": "Optional JSON configuration string",
                    "optional": true
                }
            ],
            "returnType": "object",
            "errorPattern": "Returns object with 'error' field on failure",
            "example": "const response = goxios.call('put', 'https://api.example.com/users/1', JSON.stringify({name: 'John Updated'}));"
        },
        {
            "name": "delete",
            "description": "Make a DELETE request",
            "parameters": [
                {
                    "name": "url",
                    "type": "string",
                    "description": "The URL to make the request to"
                },
                {
                    "name": "config",
                    "type": "string",
                    "description": "Optional JSON configuration string",
                    "optional": true
                }
            ],
            "returnType": "object",
            "errorPattern": "Returns object with 'error' field on failure",
            "example": "const response = goxios.call('delete', 'https://api.example.com/users/1');\nif (response.error) {\n  console.error('DELETE failed:', response.error);\n} else {\n  console.log('User deleted successfully');\n}"
        },
        {
            "name": "patch",
            "description": "Make a PATCH request",
            "parameters": [
                {
                    "name": "url",
                    "type": "string",
                    "description": "The URL to make the request to"
                },
                {
                    "name": "data",
                    "type": "string",
                    "description": "JSON data to send in the request body",
                    "optional": true
                },
                {
                    "name": "config",
                    "type": "string",
                    "description": "Optional JSON configuration string",
                    "optional": true
                }
            ],
            "returnType": "object",
            "errorPattern": "Returns object with 'error' field on failure",
            "example": "const response = goxios.call('patch', 'https://api.example.com/users/1', JSON.stringify({email: 'new@email.com'}));"
        },
        {
            "name": "request",
            "description": "Make a generic HTTP request with full configuration",
            "parameters": [
                {
                    "name": "config",
                    "type": "string",
                    "description": "JSON configuration string with method, url, data, headers, timeout"
                }
            ],
            "returnType": "object",
            "errorPattern": "Returns object with 'error' field on failure",
            "example": "const config = JSON.stringify({method: 'GET', url: 'https://api.example.com/data', headers: {'Authorization': 'Bearer token'}});\nconst response = goxios.call('request', config);\nif (response.error) {\n  console.error('Request failed:', response.error);\n} else {\n  console.log('Response:', response.data);\n}"
        },
        {
            "name": "create",
            "description": "Create a new goxios instance with default configuration",
            "parameters": [
                {
                    "name": "config",
                    "type": "string",
                    "description": "JSON configuration string with baseURL, headers, timeout defaults",
                    "optional": true
                }
            ],
            "returnType": "object",
            "errorPattern": "Returns object with 'error' field on failure",
            "example": "const instance = goxios.call('create', JSON.stringify({baseURL: 'https://api.example.com', headers: {'Content-Type': 'application/json'}}));"
        },
        {
            "name": "setDefaults",
            "description": "Set global default configuration for all requests",
            "parameters": [
                {
                    "name": "config",
                    "type": "string",
                    "description": "JSON configuration string with default settings"
                }
            ],
            "returnType": "object",
            "errorPattern": "Returns object with 'error' field on failure",
            "example": "const result = goxios.call('setDefaults', JSON.stringify({timeout: 10000, headers: {'User-Agent': 'MyApp/1.0'}}));\nconsole.log('Defaults set:', result.success);"
        },
        {
            "name": "getDefaults",
            "description": "Get current global default configuration",
            "parameters": [],
            "returnType": "object",
            "errorPattern": "Returns object with 'error' field on failure",
            "example": "const defaults = goxios.call('getDefaults');\nconsole.log('Current defaults:', defaults.config);"
        },
        {
            "name": "setSilentMode",
            "description": "Enable/disable silent mode for console logs",
            "parameters": [
                {
                    "name": "silent",
                    "type": "boolean",
                    "description": "true to enable silent mode, false to disable it"
                }
            ],
            "returnType": "boolean",
            "example": "goxios.call('setSilentMode', true); // returns true and enables silent mode"
        },
        {
            "name": "getAvailableFunctions",
            "description": "Get list of all available functions in the module",
            "parameters": [],
            "returnType": "Array<string>",
            "example": "const functions = goxios.call('getAvailableFunctions');\nconsole.log('Available functions:', functions);"
        }
    ],
    "errorHandling": {
        "pattern": "object-based",
        "description": "Goxios module returns objects with 'error' field when operations fail",
        "examples": [
            {
                "error": "Invalid URL: scheme must be http or https",
                "cause": "Called request function with malformed URL"
            },
            {
                "error": "Network error: connection timeout",
                "cause": "Request exceeded configured timeout duration"
            },
            {
                "error": "JSON parse error: invalid character at position 5",
                "cause": "Passed malformed JSON string to config parameter"
            },
            {
                "error": "HTTP error: 404 Not Found",
                "cause": "Server returned 404 status code"
            },
            {
                "error": "DNS resolution failed: no such host",
                "cause": "Hostname could not be resolved"
            }
        ],
        "detection": "if (result.error) { /* handle error */ } else { /* use result data */ }"
    },
    "gowmConfig": {
        "supportedBranches": ["master", "stable"],
        "preferredFilename": "main.wasm",
        "autoDetect": true,
        "readySignal": "__gowm_ready",
        "standardFunctions": ["getAvailableFunctions", "setSilentMode"],
        "errorPattern": "object-based"
    },
    "types": [
        {
            "name": "HttpResponse",
            "description": "Standard HTTP response object",
            "properties": {
                "status": "number (HTTP status code)",
                "data": "any (response body data)",
                "headers": "object (response headers)",
                "config": "object (request configuration used)",
                "error": "string (optional, present on failure)"
            }
        },
        {
            "name": "RequestConfig",
            "description": "HTTP request configuration object",
            "properties": {
                "method": "string (HTTP method: GET, POST, PUT, DELETE, PATCH)",
                "url": "string (request URL)",
                "baseURL": "string (optional, base URL for relative requests)",
                "data": "any (request body data)",
                "headers": "object (request headers)",
                "timeout": "number (request timeout in milliseconds)",
                "params": "object (URL query parameters)"
            }
        },
        {
            "name": "GoxiosInstance", 
            "description": "Goxios instance with methods: get(), post(), put(), delete(), patch(), request()",
            "properties": {
                "get": "function (url, config?) => HttpResponse",
                "post": "function (url, data?, config?) => HttpResponse",
                "put": "function (url, data?, config?) => HttpResponse",
                "delete": "function (url, config?) => HttpResponse",
                "patch": "function (url, data?, config?) => HttpResponse",
                "request": "function (config) => HttpResponse",
                "error": "string (optional, present on failure)"
            }
        }
    ],
    "security": {
        "features": [
            "CORS-compliant requests",
            "SSL/TLS certificate validation",
            "Request/response interceptors",
            "Timeout protection against hanging requests",
            "Input validation and sanitization",
            "Memory-safe Go implementation",
            "Protection against request smuggling"
        ]
    },
    "compatibility": {
        "browsers": [
            "Chrome 57+",
            "Firefox 52+",
            "Safari 11+",
            "Edge 16+"
        ],
        "gowm": "1.0.0+",
        "nodejs": "14.0.0+"
    },
    "performance": {
        "features": [
            "Compiled WebAssembly for optimal performance",
            "Native Go HTTP client implementation",
            "Connection pooling and reuse",
            "Efficient memory usage",
            "Silent mode for production environments",
            "Optimized for GoWM integration"
        ]
    },
    "examples": [
        {
            "title": "GoWM Integration - Basic HTTP Requests",
            "language": "javascript",
            "code": "import { loadFromGitHub } from 'gowm';\n\n// Load goxios module from wasm-modules-repository\nconst goxios = await loadFromGitHub('benoitpetit/wasm-modules-repository', {\n  path: 'goxios-wasm',\n  filename: 'main.wasm',\n  name: 'goxios-wasm',\n  branch: 'master'\n});\n\n// Configure module\ngoxios.call('setSilentMode', true);\n\n// Set global default configuration\nconst defaultConfig = JSON.stringify({\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n    'User-Agent': 'MyApp/1.0'\n  }\n});\ngoxios.call('setDefaults', defaultConfig);\n\n// Make GET request with error handling\nconst response = goxios.call('get', 'https://jsonplaceholder.typicode.com/posts/1');\nif (response.error) {\n  console.error('GET request failed:', response.error);\n} else {\n  console.log('Status:', response.status);\n  console.log('Data:', JSON.parse(response.data));\n  console.log('Headers:', response.headers);\n}"
        },
        {
            "title": "POST Request with Data",
            "language": "javascript",
            "code": "// Create new post\nconst postData = JSON.stringify({\n  title: 'New Post',\n  body: 'This is the post content',\n  userId: 1\n});\n\nconst postResponse = goxios.call('post', 'https://jsonplaceholder.typicode.com/posts', postData);\nif (postResponse.error) {\n  console.error('POST failed:', postResponse.error);\n} else {\n  const createdPost = JSON.parse(postResponse.data);\n  console.log('Created post ID:', createdPost.id);\n  console.log('Response status:', postResponse.status);\n}\n\n// Update post with PUT\nconst updateData = JSON.stringify({\n  id: 1,\n  title: 'Updated Post Title',\n  body: 'Updated content',\n  userId: 1\n});\n\nconst putResponse = goxios.call('put', 'https://jsonplaceholder.typicode.com/posts/1', updateData);\nif (putResponse.error) {\n  console.error('PUT failed:', putResponse.error);\n} else {\n  console.log('Updated successfully:', JSON.parse(putResponse.data));\n}"
        },
        {
            "title": "React Hook Integration",
            "language": "jsx",
            "code": "import React, { useState, useEffect } from 'react';\nimport { useWasmFromGitHub } from 'gowm/hooks/useWasm';\n\nfunction ApiClient() {\n  const { wasm: goxios, loading, error } = useWasmFromGitHub('benoitpetit/wasm-modules-repository', {\n    path: 'goxios-wasm',\n    filename: 'main.wasm',\n    name: 'goxios-wasm',\n    branch: 'master'\n  });\n  \n  const [posts, setPosts] = useState([]);\n  const [requesting, setRequesting] = useState(false);\n  const [functions, setFunctions] = useState([]);\n\n  useEffect(() => {\n    if (goxios) {\n      goxios.call('setSilentMode', true);\n      const availableFunctions = goxios.call('getAvailableFunctions');\n      setFunctions(availableFunctions);\n      \n      // Set default configuration\n      const defaultConfig = JSON.stringify({\n        timeout: 5000,\n        headers: { 'Content-Type': 'application/json' }\n      });\n      goxios.call('setDefaults', defaultConfig);\n    }\n  }, [goxios]);\n\n  const fetchPosts = async () => {\n    if (!goxios) return;\n    \n    setRequesting(true);\n    try {\n      const response = goxios.call('get', 'https://jsonplaceholder.typicode.com/posts');\n      \n      if (response.error) {\n        alert(`Failed to fetch posts: ${response.error}`);\n      } else {\n        const postsData = JSON.parse(response.data);\n        setPosts(postsData.slice(0, 5)); // Show first 5 posts\n      }\n    } catch (error) {\n      alert(`Request error: ${error.message}`);\n    }\n  };\n\n  const createPost = async () => {\n    if (!goxios) return;\n    \n    const newPost = JSON.stringify({\n      title: 'New Post from React',\n      body: 'This post was created using Goxios WASM',\n      userId: 1\n    });\n    \n    setRequesting(true);\n    try {\n      const response = goxios.call('post', 'https://jsonplaceholder.typicode.com/posts', newPost);\n      \n      if (response.error) {\n        alert(`Failed to create post: ${response.error}`);\n      } else {\n        const createdPost = JSON.parse(response.data);\n        setPosts(prev => [createdPost, ...prev]);\n        alert(`Post created with ID: ${createdPost.id}`);\n      }\n    } catch (error) {\n      alert(`Create error: ${error.message}`);\n    }\n  };\n\n  if (loading) return <div>Loading HTTP client...</div>;\n  if (error) return <div>Error: {error.message}</div>;\n\n  return (\n    <div>\n      <h3>HTTP Functions: {functions.join(', ')}</h3>\n      \n      <div>\n        <button onClick={fetchPosts} disabled={requesting}>\n          {requesting ? 'Loading...' : 'Fetch Posts'}\n        </button>\n        <button onClick={createPost} disabled={requesting}>\n          Create New Post\n        </button>\n      </div>\n      \n      <div>\n        <h4>Posts:</h4>\n        {posts.map(post => (\n          <div key={post.id} style={{ border: '1px solid #ccc', margin: '10px', padding: '10px' }}>\n            <h5>{post.title}</h5>\n            <p>{post.body}</p>\n            <small>User ID: {post.userId}</small>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}"
        },
        {
            "title": "Advanced Request Configuration",
            "language": "javascript",
            "code": "// Custom request with full configuration\nconst advancedConfig = JSON.stringify({\n  method: 'POST',\n  url: 'https://api.example.com/data',\n  data: JSON.stringify({ key: 'value' }),\n  headers: {\n    'Authorization': 'Bearer your-token-here',\n    'Content-Type': 'application/json',\n    'X-Custom-Header': 'custom-value'\n  },\n  timeout: 15000\n});\n\nconst response = goxios.call('request', advancedConfig);\nif (response.error) {\n  console.error('Advanced request failed:', response.error);\n} else {\n  console.log('Success - Status:', response.status);\n  console.log('Response headers:', response.headers);\n  console.log('Response data:', response.data);\n}\n\n// Create instance with default configuration\nconst instanceConfig = JSON.stringify({\n  baseURL: 'https://api.example.com',\n  headers: {\n    'Authorization': 'Bearer token',\n    'Content-Type': 'application/json'\n  },\n  timeout: 10000\n});\n\nconst instance = goxios.call('create', instanceConfig);\nif (instance.error) {\n  console.error('Failed to create instance:', instance.error);\n} else {\n  console.log('Instance created successfully');\n  // Use instance.get(), instance.post(), etc. with the default config\n}"
        },
        {
            "title": "Error Handling Patterns",
            "language": "javascript",
            "code": "// Helper function for consistent HTTP error handling\nfunction handleHttpResponse(response, successCallback, errorCallback) {\n  if (response.error) {\n    errorCallback(response.error, response.status || null);\n  } else {\n    successCallback(response.data, response.status, response.headers);\n  }\n}\n\n// Usage examples with different request types\nconst requests = [\n  { method: 'get', url: 'https://jsonplaceholder.typicode.com/posts/1' },\n  { method: 'get', url: 'https://invalid-domain-that-does-not-exist.com' }, // Will fail\n  { method: 'post', url: 'https://jsonplaceholder.typicode.com/posts', data: JSON.stringify({title: 'Test'}) },\n  { method: 'delete', url: 'https://jsonplaceholder.typicode.com/posts/1' }\n];\n\nrequests.forEach((req, index) => {\n  const response = req.data ? \n    goxios.call(req.method, req.url, req.data) : \n    goxios.call(req.method, req.url);\n  \n  handleHttpResponse(\n    response,\n    (data, status, headers) => {\n      console.log(`Request ${index + 1} (${req.method.toUpperCase()}) success:`);\n      console.log(`  Status: ${status}`);\n      console.log(`  Data: ${typeof data === 'string' ? data.substring(0, 100) + '...' : data}`);\n    },\n    (error, status) => {\n      console.error(`Request ${index + 1} (${req.method.toUpperCase()}) failed:`);\n      console.error(`  Error: ${error}`);\n      if (status) console.error(`  Status: ${status}`);\n    }\n  );\n});"
        }
    ],
    "buildInfo": {
        "language": "Go",
        "target": "js/wasm",
        "buildCommand": "./build.sh",
        "outputFile": "main.wasm",
        "goModule": true,
        "buildTime": "Generated during build process",
        "compilerFlags": [
            "GOOS=js",
            "GOARCH=wasm"
        ]
    },
    "wasmConfig": {
        "filename": "main.wasm",
        "goWasmExecRequired": true,
        "globalFunctions": true,
        "readySignal": "__gowm_ready",
        "memoryInitialPages": 1024,
        "memoryMaximumPages": 4096
    },
    "usageStats": {
        "complexity": "intermediate",
        "averageCallTime": "50-500ms",
        "memoryUsage": "moderate",
        "concurrency": "thread-safe"
    },
    "quality": {
        "stability": "stable",
        "documentation": "complete",
        "testing": "comprehensive",
        "maintainability": "high"
    },
    "ecosystem": {
        "category": "networking",
        "subcategory": "http-client",
        "relatedModules": ["crypto-wasm"],
        "useCase": ["api-integration", "data-fetching", "microservices", "web-scraping"],
        "industry": ["web-development", "fintech", "saas", "e-commerce"]
    },
    "fileInfo": {
        "sourceLines": 671,
        "binarySize": "9.1MB",
        "compressedSize": "2.6MB",
        "compressionRatio": "71%"
    },
    "changelog": {
        "version": "0.2.2",
        "releaseDate": "2025-06-17",
        "changes": [
            "Full axios-like HTTP client implementation",
            "Support for all HTTP methods (GET, POST, PUT, DELETE, PATCH)",
            "Custom instance creation with default configs",
            "Request/response interceptors",
            "Timeout and error handling",
            "JSON configuration for WASM compatibility"
        ]
    }
}