{
  "author": "Ben",
  "buildInfo": {
    "buildCommand": "wasm-manager build",
    "buildTime": "2025-06-19T16:00:56+02:00",
    "compilerFlags": [
      "GOOS=js",
      "GOARCH=wasm",
      "CGO_ENABLED=0",
      "-ldflags=-s -w -buildid=",
      "-trimpath",
      "-buildmode=default",
      "-tags=netgo,osusergo",
      "-a",
      "-gcflags=-l=4 -B",
      "wasm-opt=-Oz --enable-bulk-memory"
    ],
    "dependencies": [
      "github.com/jung-kurt/gofpdf"
    ],
    "goModule": true,
    "goVersion": "1.24.3",
    "language": "Go",
    "lastModified": "2025-06-19T16:00:55+02:00",
    "outputFile": "main.wasm",
    "target": "js/wasm",
    "wasmOptUsed": true
  },
  "buildTime": 1750341656,
  "changelog": {
    "changes": [
      "üöÄ Major v0.1.0 release with comprehensive PDF capabilities",
      "‚úÖ Professional invoice generation with full customization",
      "üéì Certificate and contract generation templates",
      "üìä Advanced table and chart generation support",
      "üîÑ HTML and Markdown to PDF conversion",
      "üìà Comprehensive PDF analysis and optimization",
      "üé® Enhanced watermarking and digital signature capabilities",
      "üõ†Ô∏è Intelligent PDF optimization with multiple levels",
      "üìã 25+ total functions covering all PDF operations",
      "üñºÔ∏è PDF to images conversion with customizable options",
      "üìù Form filling and annotation support",
      "‚ö° Improved performance and error handling",
      "üîß Full GoWM integration and compatibility"
    ],
    "releaseDate": "2025-06-19",
    "version": "2.0.0"
  },
  "compatibility": {
    "browsers": [
      "Chrome 69+",
      "Firefox 79+",
      "Safari 15+",
      "Edge 79+"
    ],
    "gowm": "1.0.0+",
    "nodejs": "14.0.0+"
  },
  "description": "Advanced PDF manipulation module with comprehensive business document generation, analysis, and optimization capabilities written in Go and compiled to WebAssembly.",
  "ecosystem": {
    "category": "documents",
    "industry": [
      "business",
      "legal",
      "healthcare",
      "education",
      "finance",
      "e-commerce",
      "consulting"
    ],
    "relatedModules": [
      "image-wasm",
      "qr-wasm",
      "text-wasm",
      "crypto-wasm"
    ],
    "subcategory": "pdf",
    "useCase": [
      "invoice-generation",
      "certificate-creation",
      "contract-automation",
      "report-generation",
      "document-conversion",
      "pdf-analysis",
      "content-optimization",
      "business-automation"
    ]
  },
  "errorHandling": {
    "description": "PDF module returns objects with 'error' field when operations fail, with detailed error messages and operation context",
    "detection": "if (result.error) { console.error('PDF error:', result.error); } else { /* use result data */ }",
    "examples": [
      {
        "cause": "Called generateInvoice() with malformed invoice data structure",
        "error": "Invalid invoice data format: missing required field 'number'"
      },
      {
        "cause": "Called generateCertificate() with empty recipient name",
        "error": "Certificate generation failed: recipient name cannot be empty"
      },
      {
        "cause": "Called addTable() with mismatched header and row column counts",
        "error": "Table generation failed: row 2 has 4 columns but header has 3"
      },
      {
        "cause": "Called addChart() with invalid chart type or empty data",
        "error": "Chart generation failed: chart type 'pie' not supported"
      },
      {
        "cause": "Called htmlToPDF() with complex unsupported HTML elements",
        "error": "HTML conversion failed: unsupported element 'canvas'"
      },
      {
        "cause": "Called markdownToPDF() with malformed markdown syntax",
        "error": "Markdown conversion failed: unclosed code block at line 15"
      },
      {
        "cause": "Called optimizePDF() with corrupted PDF data",
        "error": "PDF optimization failed: corrupted file structure detected"
      },
      {
        "cause": "Called analyzePDF() with non-PDF base64 data",
        "error": "PDF analysis failed: invalid PDF header signature"
      },
      {
        "cause": "Called addSignature() with missing signature data",
        "error": "Digital signature failed: signer name is required"
      },
      {
        "cause": "Called fillForm() on PDF without form fields",
        "error": "Form filling failed: no form fields found in document"
      }
    ],
    "pattern": "object-based"
  },
  "examples": [
    {
      "code": "import { loadFromGitHub } from 'gowm';\n\n// Load advanced PDF module \nconst pdf = await loadFromGitHub('benoitpetit/wasm-modules-repository', {\n  path: 'pdf-wasm',\n  filename: 'main.wasm',\n  name: 'pdf-wasm',\n  branch: 'master'\n});\n\n// Configure module\npdf.call('setSilentMode', true);\n\n// Get module information\nconst moduleInfo = pdf.call('getModuleInfo');\nconsole.log('PDF Module:', moduleInfo.name, 'v' + moduleInfo.version);\nconsole.log('Available functions:', moduleInfo.functions);\n\n// Professional invoice generation\nconst invoiceData = {\n  number: 'INV-2025-001',\n  date: '2025-06-19',\n  dueDate: '2025-07-19',\n  company: {\n    name: 'TechCorp Solutions',\n    address: '123 Business St, Paris 75001',\n    phone: '+33 1 23 45 67 89',\n    email: 'contact@techcorp.fr',\n    vat: 'FR123456789'\n  },\n  client: {\n    name: 'Client Enterprise',\n    address: '456 Client Ave, Lyon 69000'\n  },\n  items: [\n    { description: 'Consulting Services', quantity: 10, price: 150, total: 1500 },\n    { description: 'Development Hours', quantity: 20, price: 120, total: 2400 }\n  ],\n  tax: 20,\n  currency: '‚Ç¨',\n  notes: 'Paiement √† 30 jours. Merci pour votre confiance.'\n};\n\nconst invoiceResult = pdf.call('generateInvoice', JSON.stringify(invoiceData));\nif (invoiceResult.error) {\n  console.error('Invoice generation failed:', invoiceResult.error);\n} else {\n  console.log('‚úÖ Invoice generated successfully!');\n  console.log('Invoice number:', invoiceResult.invoiceNumber);\n  console.log('Total amount:', invoiceResult.total, invoiceResult.currency);\n  \n  // Download the invoice\n  const blob = new Blob([atob(invoiceResult.pdfData)], {type: 'application/pdf'});\n  const url = URL.createObjectURL(blob);\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = `invoice-${invoiceData.number}.pdf`;\n  a.click();\n}",
      "language": "javascript",
      "title": "Professional Invoice Generation"
    },
    {
      "code": "// Advanced document workflow with multiple operations\nasync function createBusinessDocument() {\n  const pdf = await loadFromGitHub('benoitpetit/wasm-modules-repository', {\n    path: 'pdf-wasm',\n    name: 'pdf-wasm'\n  });\n  \n  pdf.call('setSilentMode', true);\n  \n  // Step 1: Convert Markdown content to PDF\n  const markdownContent = `\n# Rapport d'Activit√© Q2 2025\n\n## R√©sum√© Ex√©cutif\nNous avons atteint nos objectifs trimestriels avec une croissance de **25%**.\n\n### M√©triques Cl√©s\n- Chiffre d'affaires: 2.4M‚Ç¨\n- Nouveaux clients: 150\n- Satisfaction client: 95%\n\n## Performances par D√©partement\n\n### Ventes\n- Objectif d√©pass√© de 15%\n- 3 nouveaux march√©s conquis\n\n### D√©veloppement\n- 5 nouvelles fonctionnalit√©s livr√©es\n- R√©duction des bugs de 40%\n  `;\n  \n  let result = pdf.call('markdownToPDF', markdownContent);\n  if (result.error) throw new Error(result.error);\n  let pdfData = result.pdfData;\n  \n  // Step 2: Add performance chart\n  const chartData = {\n    type: 'bar',\n    title: 'Performance Trimestrielle',\n    data: [\n      { label: 'Q1', value: 1.8 },\n      { label: 'Q2', value: 2.4 },\n      { label: 'Q3 (pr√©v)', value: 2.8 },\n      { label: 'Q4 (pr√©v)', value: 3.2 }\n    ]\n  };\n  \n  result = pdf.call('addChart', pdfData, JSON.stringify(chartData));\n  if (result.error) throw new Error(result.error);\n  pdfData = result.pdfData;\n  \n  // Step 3: Add data table\n  const tableData = {\n    headers: ['D√©partement', 'Budget', 'R√©alis√©', '√âcart'],\n    rows: [\n      ['Ventes', '1.5M‚Ç¨', '1.8M‚Ç¨', '+20%'],\n      ['Marketing', '300K‚Ç¨', '280K‚Ç¨', '-7%'],\n      ['R\u0026D', '600K‚Ç¨', '620K‚Ç¨', '+3%'],\n      ['Support', '200K‚Ç¨', '190K‚Ç¨', '-5%']\n    ]\n  };\n  \n  result = pdf.call('addTable', pdfData, JSON.stringify(tableData));\n  if (result.error) throw new Error(result.error);\n  pdfData = result.pdfData;\n  \n  // Step 4: Add confidential watermark\n  const watermark = {\n    text: 'CONFIDENTIEL',\n    opacity: 0.2,\n    rotation: 45\n  };\n  \n  result = pdf.call('addWatermark', pdfData, JSON.stringify(watermark));\n  if (result.error) throw new Error(result.error);\n  pdfData = result.pdfData;\n  \n  // Step 5: Optimize the final document\n  result = pdf.call('optimizePDF', pdfData, 'balanced');\n  if (result.error) throw new Error(result.error);\n  \n  console.log('üìä Business report generated successfully!');\n  console.log('- Original size:', result.originalSize, 'bytes');\n  console.log('- Optimized size:', result.optimizedSize, 'bytes');\n  console.log('- Savings:', result.savingsPercent + '%');\n  console.log('- Optimizations applied:', result.optimizations);\n  \n  return result.pdfData;\n}",
      "language": "javascript",
      "title": "Advanced Business Document Workflow"
    },
    {
      "code": "import React, { useState, useEffect } from 'react';\nimport { useWasmFromGitHub } from 'gowm/hooks/useWasm';\n\nfunction PDFBusinessGenerator() {\n  const { wasm: pdf, loading, error } = useWasmFromGitHub('benoitpetit/wasm-modules-repository', {\n    path: 'pdf-wasm',\n    name: 'pdf-wasm'\n  });\n  \n  const [documentType, setDocumentType] = useState('invoice');\n  const [moduleInfo, setModuleInfo] = useState(null);\n  const [result, setResult] = useState(null);\n  const [processing, setProcessing] = useState(false);\n\n  useEffect(() =\u003e {\n    if (pdf) {\n      pdf.call('setSilentMode', true);\n      const info = pdf.call('getModuleInfo');\n      setModuleInfo(info);\n    }\n  }, [pdf]);\n\n  const generateDocument = async () =\u003e {\n    if (!pdf) return;\n    setProcessing(true);\n    \n    try {\n      let result;\n      \n      if (documentType === 'invoice') {\n        const invoiceData = {\n          number: 'INV-' + Date.now(),\n          date: new Date().toISOString().split('T')[0],\n          dueDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n          company: {\n            name: 'Ma Soci√©t√©',\n            address: '123 Rue Example, 75000 Paris',\n            phone: '+33 1 23 45 67 89',\n            email: 'contact@masociete.fr'\n          },\n          client: {\n            name: 'Client Test',\n            address: '456 Avenue Client, 69000 Lyon'\n          },\n          items: [\n            { description: 'Service de conseil', quantity: 1, price: 500, total: 500 },\n            { description: 'D√©veloppement', quantity: 10, price: 80, total: 800 }\n          ],\n          tax: 20,\n          currency: '‚Ç¨'\n        };\n        \n        result = pdf.call('generateInvoice', JSON.stringify(invoiceData));\n        \n      } else if (documentType === 'certificate') {\n        const certData = {\n          title: 'CERTIFICAT DE R√âUSSITE',\n          recipient: 'Jean Dupont',\n          achievement: 'a termin√© avec succ√®s la formation en d√©veloppement web',\n          date: new Date().toLocaleDateString('fr-FR'),\n          issuer: 'Formation Academy'\n        };\n        \n        result = pdf.call('generateCertificate', JSON.stringify(certData));\n        \n      } else if (documentType === 'analysis') {\n        // Create a sample PDF first\n        const samplePages = [{ content: 'Document de test pour analyse', margin: 15 }];\n        const sampleResult = pdf.call('createPDF', JSON.stringify(samplePages));\n        \n        if (sampleResult.error) throw new Error(sampleResult.error);\n        \n        // Analyze the sample PDF\n        result = pdf.call('analyzePDF', sampleResult.pdfData);\n      }\n      \n      if (result.error) {\n        setResult({ error: result.error });\n      } else {\n        setResult(result);\n        \n        // Auto-download for PDF results\n        if (result.pdfData) {\n          const blob = new Blob([atob(result.pdfData)], {type: 'application/pdf'});\n          const url = URL.createObjectURL(blob);\n          const a = document.createElement('a');\n          a.href = url;\n          a.download = `${documentType}-${Date.now()}.pdf`;\n          a.click();\n        }\n      }\n    } catch (err) {\n      setResult({ error: err.message });\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  if (loading) return React.createElement('div', null, '‚è≥ Chargement du module PDF...');\n  if (error) return React.createElement('div', null, '‚ùå Erreur: ' + error.message);\n\n  return React.createElement('div', { style: { padding: '20px', fontFamily: 'Arial' } },\n    React.createElement('h2', null, 'üöÄ G√©n√©rateur PDF Avanc√©'),\n    \n    moduleInfo \u0026\u0026 React.createElement('div', { style: { marginBottom: '20px', padding: '10px', backgroundColor: '#f0f0f0', borderRadius: '5px' } },\n      React.createElement('strong', null, 'Module: '), moduleInfo.name + ' v' + moduleInfo.version,\n      React.createElement('br'),\n      React.createElement('strong', null, 'Fonctions disponibles: '), moduleInfo.functions,\n      React.createElement('br'),\n      React.createElement('strong', null, 'Cat√©gories: '), moduleInfo.categories.join(', ')\n    ),\n    \n    React.createElement('div', { style: { marginBottom: '20px' } },\n      React.createElement('label', null, 'Type de document: '),\n      React.createElement('select', {\n        value: documentType,\n        onChange: (e) =\u003e setDocumentType(e.target.value),\n        style: { margin: '0 10px', padding: '5px' }\n      },\n        React.createElement('option', { value: 'invoice' }, 'üìÑ Facture'),\n        React.createElement('option', { value: 'certificate' }, 'üéì Certificat'),\n        React.createElement('option', { value: 'analysis' }, 'üìä Analyse PDF')\n      )\n    ),\n    \n    React.createElement('button', {\n      onClick: generateDocument,\n      disabled: processing || !pdf,\n      style: {\n        padding: '10px 20px',\n        backgroundColor: processing ? '#ccc' : '#007bff',\n        color: 'white',\n        border: 'none',\n        borderRadius: '5px',\n        cursor: processing ? 'not-allowed' : 'pointer'\n      }\n    }, processing ? 'G√©n√©ration en cours...' : 'G√©n√©rer Document'),\n    \n    result \u0026\u0026 React.createElement('div', { style: { marginTop: '20px', padding: '15px', borderRadius: '5px', backgroundColor: result.error ? '#ffebee' : '#e8f5e8' } },\n      result.error\n        ? React.createElement('div', { style: { color: '#d32f2f' } },\n            '‚ùå Erreur: ', result.error\n          )\n        : React.createElement('div', { style: { color: '#2e7d32' } },\n            '‚úÖ Document g√©n√©r√© avec succ√®s!',\n            React.createElement('br'),\n            result.size \u0026\u0026 React.createElement('span', null, 'üìÑ Taille: ' + result.size + ' bytes'),\n            result.invoiceNumber \u0026\u0026 React.createElement('span', null, React.createElement('br'), 'üìã Num√©ro: ' + result.invoiceNumber),\n            result.total \u0026\u0026 React.createElement('span', null, React.createElement('br'), 'ÔøΩ Total: ' + result.total + ' ' + result.currency),\n            result.recipient \u0026\u0026 React.createElement('span', null, React.createElement('br'), 'üéì Destinataire: ' + result.recipient),\n            result.fileSize \u0026\u0026 React.createElement('span', null, React.createElement('br'), 'üìä Analyse: ' + result.pages + ' pages, ' + result.fileSize + ' bytes')\n          )\n    )\n  );\n}",
      "language": "jsx",
      "title": "React Business Document Generator"
    },
    {
      "code": "// Complete PDF processing pipeline\nasync function pdfProcessingPipeline() {\n  const pdf = await loadFromGitHub('benoitpetit/wasm-modules-repository', {\n    path: 'pdf-wasm',\n    name: 'pdf-wasm'\n  });\n  \n  // Step 1: HTML to PDF conversion\n  const htmlContent = `\n    \u003ch1\u003eRapport Technique\u003c/h1\u003e\n    \u003ch2\u003eIntroduction\u003c/h2\u003e\n    \u003cp\u003eCe document pr√©sente les r√©sultats de notre analyse technique.\u003c/p\u003e\n    \u003ch2\u003eM√©triques de Performance\u003c/h2\u003e\n    \u003cp\u003eLes performances ont √©t√© mesur√©es sur plusieurs indicateurs cl√©s.\u003c/p\u003e\n  `;\n  \n  console.log('üîÑ Converting HTML to PDF...');\n  let result = pdf.call('htmlToPDF', htmlContent);\n  if (result.error) throw new Error(result.error);\n  \n  let pdfData = result.pdfData;\n  console.log('‚úÖ HTML converted:', result.size, 'bytes');\n  \n  // Step 2: Add performance data table\n  const performanceTable = {\n    headers: ['M√©trique', 'Valeur Actuelle', 'Objectif', 'Status'],\n    rows: [\n      ['Temps de R√©ponse', '150ms', '200ms', '‚úÖ OK'],\n      ['Disponibilit√©', '99.9%', '99.5%', '‚úÖ D√©pass√©'],\n      ['Throughput', '1200 rps', '1000 rps', '‚úÖ D√©pass√©'],\n      ['Erreurs', '0.1%', '0.5%', '‚úÖ OK']\n    ]\n  };\n  \n  console.log('üìä Adding performance table...');\n  result = pdf.call('addTable', pdfData, JSON.stringify(performanceTable));\n  if (result.error) throw new Error(result.error);\n  \n  pdfData = result.pdfData;\n  console.log('‚úÖ Table added:', result.columns, 'columns,', result.rows, 'rows');\n  \n  // Step 3: Add trend chart\n  const trendChart = {\n    type: 'bar',\n    title: '√âvolution des Performances (6 mois)',\n    data: [\n      { label: 'Jan', value: 85 },\n      { label: 'F√©v', value: 88 },\n      { label: 'Mar', value: 92 },\n      { label: 'Avr', value: 95 },\n      { label: 'Mai', value: 97 },\n      { label: 'Jun', value: 99 }\n    ]\n  };\n  \n  console.log('üìà Adding trend chart...');\n  result = pdf.call('addChart', pdfData, JSON.stringify(trendChart));\n  if (result.error) throw new Error(result.error);\n  \n  pdfData = result.pdfData;\n  console.log('‚úÖ Chart added:', result.dataPoints, 'data points');\n  \n  // Step 4: Comprehensive analysis\n  console.log('üîç Analyzing final document...');\n  const analysis = pdf.call('analyzePDF', pdfData);\n  if (analysis.error) throw new Error(analysis.error);\n  \n  console.log('üìã Analysis results:');\n  console.log('- File size:', analysis.fileSize, 'bytes');\n  console.log('- Pages:', analysis.pages);\n  console.log('- Fonts used:', analysis.fonts.join(', '));\n  console.log('- Optimization tips:', analysis.optimizationTips.length);\n  \n  // Step 5: Intelligent optimization\n  console.log('‚ö° Optimizing document...');\n  result = pdf.call('optimizePDF', pdfData, 'balanced');\n  if (result.error) throw new Error(result.error);\n  \n  console.log('‚úÖ Optimization complete:');\n  console.log('- Original size:', result.originalSize, 'bytes');\n  console.log('- Optimized size:', result.optimizedSize, 'bytes');\n  console.log('- Space saved:', result.savingsPercent + '%');\n  console.log('- Optimizations:', result.optimizations.join(', '));\n  \n  // Final download\n  const blob = new Blob([atob(result.pdfData)], {type: 'application/pdf'});\n  const url = URL.createObjectURL(blob);\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = 'technical-report-optimized.pdf';\n  a.click();\n  \n  return {\n    originalSize: result.originalSize,\n    optimizedSize: result.optimizedSize,\n    savings: result.savingsPercent,\n    analysis: analysis\n  };\n}",
      "language": "javascript",
      "title": "Complete PDF Processing Pipeline"
    }
  ],
  "fileInfo": {
    "binarySize": "4.9 MB",
    "compressedSize": "1.4 MB",
    "compressionRatio": "72%",
    "sourceLines": 1194
  },
  "functions": [
    {
      "description": "Generate professional invoice PDF with customizable template and calculations",
      "errorPattern": "Returns object with 'error' field on failure",
      "example": "const invoiceData = JSON.stringify({\n  number: 'INV-2025-001',\n  date: '2025-06-19',\n  dueDate: '2025-07-19',\n  company: { name: 'My Company', address: '123 Street', email: 'contact@company.com' },\n  client: { name: 'Client Name', address: '456 Avenue' },\n  items: [{ description: 'Service', quantity: 1, price: 500, total: 500 }],\n  tax: 20, currency: '‚Ç¨'\n});\nconst result = pdf.call('generateInvoice', invoiceData);\nif (result.error) {\n  console.error('Invoice generation failed:', result.error);\n} else {\n  console.log('Invoice generated:', result.invoiceNumber, 'Total:', result.total);\n}",
      "name": "generateInvoice",
      "parameters": [
        {
          "description": "JSON string of invoice data structure with company, client, items, tax, etc.",
          "name": "invoiceData",
          "type": "string"
        }
      ],
      "returnType": "object"
    },
    {
      "description": "Generate professional certificate or diploma PDF document",
      "errorPattern": "Returns object with 'error' field on failure",
      "example": "const certData = JSON.stringify({\n  title: 'CERTIFICATE OF COMPLETION',\n  recipient: 'John Doe',\n  achievement: 'Successfully completed the Web Development Course',\n  date: '2025-06-19',\n  issuer: 'Tech Academy'\n});\nconst result = pdf.call('generateCertificate', certData);\nif (result.error) {\n  console.error('Certificate generation failed:', result.error);\n} else {\n  console.log('Certificate generated for:', result.recipient);\n}",
      "name": "generateCertificate",
      "parameters": [
        {
          "description": "JSON string of certificate data with title, recipient, achievement, date, issuer",
          "name": "certificateData",
          "type": "string"
        }
      ],
      "returnType": "object"
    },
    {
      "description": "Add professionally formatted data table to PDF document",
      "errorPattern": "Returns object with 'error' field on failure",
      "example": "const tableData = JSON.stringify({\n  headers: ['Product', 'Price', 'Stock'],\n  rows: [['Item A', '$10', '50'], ['Item B', '$15', '25']]\n});\nconst result = pdf.call('addTable', pdfData, tableData);\nif (result.error) {\n  console.error('Table addition failed:', result.error);\n} else {\n  console.log('Table added:', result.columns, 'columns,', result.rows, 'rows');\n}",
      "name": "addTable",
      "parameters": [
        {
          "description": "Base64-encoded PDF data",
          "name": "pdfData",
          "type": "string"
        },
        {
          "description": "JSON string of table data with headers and rows arrays",
          "name": "tableData",
          "type": "string"
        }
      ],
      "returnType": "object"
    },
    {
      "description": "Add chart or graph visualization to PDF document",
      "errorPattern": "Returns object with 'error' field on failure",
      "example": "const chartData = JSON.stringify({\n  type: 'bar',\n  title: 'Sales Performance',\n  data: [{ label: 'Q1', value: 100 }, { label: 'Q2', value: 150 }]\n});\nconst result = pdf.call('addChart', pdfData, chartData);\nif (result.error) {\n  console.error('Chart addition failed:', result.error);\n} else {\n  console.log('Chart added:', result.chartType, 'with', result.dataPoints, 'points');\n}",
      "name": "addChart",
      "parameters": [
        {
          "description": "Base64-encoded PDF data",
          "name": "pdfData",
          "type": "string"
        },
        {
          "description": "JSON string of chart configuration with type, title, and data array",
          "name": "chartData",
          "type": "string"
        }
      ],
      "returnType": "object"
    },
    {
      "description": "Convert HTML content to PDF document with styling support",
      "errorPattern": "Returns object with 'error' field on failure",
      "example": "const htmlContent = '\u003ch1\u003eMy Report\u003c/h1\u003e\u003cp\u003eThis is a \u003cstrong\u003eprofessional\u003c/strong\u003e document.\u003c/p\u003e';\nconst result = pdf.call('htmlToPDF', htmlContent);\nif (result.error) {\n  console.error('HTML conversion failed:', result.error);\n} else {\n  console.log('HTML converted to PDF:', result.size, 'bytes');\n}",
      "name": "htmlToPDF",
      "parameters": [
        {
          "description": "HTML content string to convert to PDF",
          "name": "htmlContent",
          "type": "string"
        }
      ],
      "returnType": "object"
    },
    {
      "description": "Convert Markdown content to PDF with automatic formatting",
      "errorPattern": "Returns object with 'error' field on failure",
      "example": "const markdown = '# Report\\n\\n## Introduction\\n\\nThis is **important** text.';\nconst result = pdf.call('markdownToPDF', markdown);\nif (result.error) {\n  console.error('Markdown conversion failed:', result.error);\n} else {\n  console.log('Markdown converted to PDF:', result.size, 'bytes');\n}",
      "name": "markdownToPDF",
      "parameters": [
        {
          "description": "Markdown content string to convert to PDF",
          "name": "markdownContent",
          "type": "string"
        }
      ],
      "returnType": "object"
    },
    {
      "description": "Comprehensive PDF document analysis and metadata extraction",
      "errorPattern": "Returns object with 'error' field on failure",
      "example": "const result = pdf.call('analyzePDF', pdfData);\nif (result.error) {\n  console.error('PDF analysis failed:', result.error);\n} else {\n  console.log('Analysis:', result.pages, 'pages,', result.fileSize, 'bytes');\n  console.log('Fonts:', result.fonts.join(', '));\n  console.log('Optimization tips:', result.optimizationTips.length);\n}",
      "name": "analyzePDF",
      "parameters": [
        {
          "description": "Base64-encoded PDF data to analyze",
          "name": "pdfData",
          "type": "string"
        }
      ],
      "returnType": "object"
    },
    {
      "description": "Intelligent PDF optimization with multiple compression levels",
      "errorPattern": "Returns object with 'error' field on failure",
      "example": "const result = pdf.call('optimizePDF', pdfData, 'balanced');\nif (result.error) {\n  console.error('PDF optimization failed:', result.error);\n} else {\n  console.log('Optimized:', result.originalSize, '‚Üí', result.optimizedSize, 'bytes');\n  console.log('Saved:', result.savingsPercent + '% with optimizations:', result.optimizations);\n}",
      "name": "optimizePDF",
      "parameters": [
        {
          "description": "Base64-encoded PDF data to optimize",
          "name": "pdfData",
          "type": "string"
        },
        {
          "description": "Optimization level: 'fast', 'balanced', 'maximum' (default: 'balanced')",
          "name": "level",
          "type": "string"
        }
      ],
      "returnType": "object"
    },
    {
      "description": "Get comprehensive module information and capabilities",
      "errorPattern": "No errors expected",
      "example": "const info = pdf.call('getModuleInfo');\nconsole.log('Module:', info.name, 'v' + info.version);\nconsole.log('Categories:', info.categories.join(', '));\nconsole.log('Functions:', info.functions);",
      "name": "getModuleInfo",
      "parameters": [],
      "returnType": "object"
    },
    {
      "description": "Generate PDF from scratch with custom pages and metadata",
      "errorPattern": "Returns object with 'error' field on failure",
      "example": "const pages = JSON.stringify([{content: 'Hello World', margin: 10}]);\nconst metadata = JSON.stringify({title: 'My Document', author: 'John Doe'});\nconst result = pdf.call('createPDF', pages, metadata);\nif (result.error) {\n  console.error('PDF creation failed:', result.error);\n} else {\n  console.log('PDF created:', result.size, 'bytes, pages:', result.pages);\n}",
      "name": "createPDF",
      "parameters": [
        {
          "description": "JSON string of page configurations with content, dimensions, and margins",
          "name": "pages",
          "type": "string"
        },
        {
          "description": "Optional JSON string of PDF metadata (title, author, subject)",
          "name": "metadata",
          "type": "string"
        }
      ],
      "returnType": "object"
    },
    {
      "description": "Add a new page to existing PDF document",
      "errorPattern": "Returns object with 'error' field on failure",
      "example": "const pageContent = JSON.stringify({content: 'New page content', width: 210, height: 297});\nconst result = pdf.call('addPage', existingPdfData, pageContent);",
      "name": "addPage",
      "parameters": [
        {
          "description": "Base64-encoded PDF data",
          "name": "pdfData",
          "type": "string"
        },
        {
          "description": "JSON string of page configuration",
          "name": "pageContent",
          "type": "string"
        }
      ],
      "returnType": "object"
    },
    {
      "description": "Extract text content from PDF document",
      "errorPattern": "Returns object with 'error' field on failure",
      "example": "const result = pdf.call('extractText', pdfData, '1,3-5');\nif (result.error) {\n  console.error('Text extraction failed:', result.error);\n} else {\n  console.log('Extracted text:', result.text);\n}",
      "name": "extractText",
      "parameters": [
        {
          "description": "Base64-encoded PDF data",
          "name": "pdfData",
          "type": "string"
        },
        {
          "description": "Optional comma-separated page numbers (e.g., '1,3,5-7')",
          "name": "pageRange",
          "type": "string"
        }
      ],
      "returnType": "object"
    },
    {
      "description": "Extract images from PDF document",
      "errorPattern": "Returns object with 'error' field on failure",
      "example": "const result = pdf.call('extractImages', pdfData);\nif (result.error) {\n  console.error('Image extraction failed:', result.error);\n} else {\n  console.log('Extracted', result.count, 'images');\n  result.images.forEach(img =\u003e console.log('Image:', img.format, img.width + 'x' + img.height));\n}",
      "name": "extractImages",
      "parameters": [
        {
          "description": "Base64-encoded PDF data",
          "name": "pdfData",
          "type": "string"
        }
      ],
      "returnType": "object"
    },
    {
      "description": "Merge multiple PDF documents into one",
      "errorPattern": "Returns object with 'error' field on failure",
      "example": "const pdfs = JSON.stringify([pdfData1, pdfData2, pdfData3]);\nconst result = pdf.call('mergePDFs', pdfs);\nif (result.error) {\n  console.error('Merge failed:', result.error);\n} else {\n  console.log('Merged PDF:', result.pages, 'pages,', result.size, 'bytes');\n}",
      "name": "mergePDFs",
      "parameters": [
        {
          "description": "JSON string array of base64-encoded PDF data",
          "name": "pdfArray",
          "type": "string"
        }
      ],
      "returnType": "object"
    },
    {
      "description": "Split PDF document into separate parts",
      "errorPattern": "Returns object with 'error' field on failure",
      "example": "const ranges = JSON.stringify(['1-2', '3-4', '5']);\nconst result = pdf.call('splitPDF', pdfData, ranges);\nif (result.error) {\n  console.error('Split failed:', result.error);\n} else {\n  console.log('Split into', result.parts, 'PDFs');\n  result.splitPDFs.forEach(part =\u003e console.log('Part', part.partIndex, ':', part.pageRange));\n}",
      "name": "splitPDF",
      "parameters": [
        {
          "description": "Base64-encoded PDF data",
          "name": "pdfData",
          "type": "string"
        },
        {
          "description": "JSON string array of page ranges (e.g., ['1-3', '4-6', '7'])",
          "name": "ranges",
          "type": "string"
        }
      ],
      "returnType": "object"
    },
    {
      "description": "Add watermark text to PDF document",
      "errorPattern": "Returns object with 'error' field on failure",
      "example": "const watermark = JSON.stringify({text: 'CONFIDENTIAL', opacity: 0.3, rotation: 45});\nconst result = pdf.call('addWatermark', pdfData, watermark);\nif (result.error) {\n  console.error('Watermark failed:', result.error);\n} else {\n  console.log('Watermarked PDF:', result.size, 'bytes');\n}",
      "name": "addWatermark",
      "parameters": [
        {
          "description": "Base64-encoded PDF data",
          "name": "pdfData",
          "type": "string"
        },
        {
          "description": "JSON string of watermark configuration (text, opacity, rotation, etc.)",
          "name": "watermarkData",
          "type": "string"
        }
      ],
      "returnType": "object"
    },
    {
      "description": "Generate PDF report from data and template",
      "errorPattern": "Returns object with 'error' field on failure",
      "example": "const data = JSON.stringify({title: 'Sales Report', rows: [{name: 'Product A', sales: 1000}]});\nconst template = JSON.stringify({type: 'table'});\nconst result = pdf.call('generateReport', data, template);\nif (result.error) {\n  console.error('Report generation failed:', result.error);\n} else {\n  console.log('Generated report:', result.templateType, result.size, 'bytes');\n}",
      "name": "generateReport",
      "parameters": [
        {
          "description": "JSON string of report data",
          "name": "data",
          "type": "string"
        },
        {
          "description": "JSON string of template configuration",
          "name": "template",
          "type": "string"
        }
      ],
      "returnType": "object"
    },
    {
      "description": "Get PDF metadata and document information",
      "errorPattern": "Returns object with 'error' field on failure",
      "example": "const result = pdf.call('getPDFInfo', pdfData);\nif (result.error) {\n  console.error('Info extraction failed:', result.error);\n} else {\n  console.log('PDF info:', result.pages, 'pages,', result.size, 'bytes');\n  console.log('Title:', result.title, 'Author:', result.author);\n}",
      "name": "getPDFInfo",
      "parameters": [
        {
          "description": "Base64-encoded PDF data",
          "name": "pdfData",
          "type": "string"
        }
      ],
      "returnType": "object"
    },
    {
      "description": "Compress PDF file with configurable compression level",
      "errorPattern": "Returns object with 'error' field on failure",
      "example": "const result = pdf.call('compressPDF', pdfData, 'high');\nif (result.error) {\n  console.error('Compression failed:', result.error);\n} else {\n  console.log('Compressed from', result.originalSize, 'to', result.compressedSize, 'bytes');\n  console.log('Compression ratio:', result.compressionRatio + '%');\n}",
      "name": "compressPDF",
      "parameters": [
        {
          "description": "Base64-encoded PDF data",
          "name": "pdfData",
          "type": "string"
        },
        {
          "description": "Compression level: 'low', 'medium', 'high' (optional, default: 'medium')",
          "name": "compressionLevel",
          "type": "string"
        }
      ],
      "returnType": "object"
    },
    {
      "description": "Add digital signature to PDF document",
      "errorPattern": "Returns object with 'error' field on failure",
      "example": "const signatureData = JSON.stringify({name: 'John Doe', reason: 'Document approval', location: 'Paris'});\nconst result = pdf.call('addSignature', pdfData, signatureData);\nif (result.error) {\n  console.error('Signature failed:', result.error);\n} else {\n  console.log('Document signed by:', result.signerName);\n}",
      "name": "addSignature",
      "parameters": [
        {
          "description": "Base64-encoded PDF data",
          "name": "pdfData",
          "type": "string"
        },
        {
          "description": "JSON string of signature configuration",
          "name": "signatureData",
          "type": "string"
        }
      ],
      "returnType": "object"
    },
    {
      "description": "Add annotations (comments, highlights) to PDF",
      "errorPattern": "Returns object with 'error' field on failure",
      "example": "const annotation = JSON.stringify({type: 'comment', text: 'Important note', page: 1, x: 100, y: 200});\nconst result = pdf.call('addAnnotation', pdfData, annotation);\nif (result.error) {\n  console.error('Annotation failed:', result.error);\n} else {\n  console.log('Added annotation:', result.annotationType);\n}",
      "name": "addAnnotation",
      "parameters": [
        {
          "description": "Base64-encoded PDF data",
          "name": "pdfData",
          "type": "string"
        },
        {
          "description": "JSON string of annotation configuration",
          "name": "annotationData",
          "type": "string"
        }
      ],
      "returnType": "object"
    },
    {
      "description": "Convert PDF pages to image format",
      "errorPattern": "Returns object with 'error' field on failure",
      "example": "const options = JSON.stringify({format: 'PNG', dpi: 150, pages: '1-3'});\nconst result = pdf.call('pdfToImages', pdfData, options);\nif (result.error) {\n  console.error('PDF to images conversion failed:', result.error);\n} else {\n  console.log('Converted', result.imageCount, 'pages to images');\n}",
      "name": "pdfToImages",
      "parameters": [
        {
          "description": "Base64-encoded PDF data",
          "name": "pdfData",
          "type": "string"
        },
        {
          "description": "JSON string of conversion options (format, dpi, pages)",
          "name": "options",
          "type": "string"
        }
      ],
      "returnType": "object"
    },
    {
      "description": "Fill PDF form fields with data",
      "errorPattern": "Returns object with 'error' field on failure",
      "example": "const formData = JSON.stringify({firstName: 'John', lastName: 'Doe', email: 'john@example.com'});\nconst result = pdf.call('fillForm', pdfData, formData);\nif (result.error) {\n  console.error('Form filling failed:', result.error);\n} else {\n  console.log('Filled', result.fieldsCompleted, 'form fields');\n}",
      "name": "fillForm",
      "parameters": [
        {
          "description": "Base64-encoded PDF data with form fields",
          "name": "pdfData",
          "type": "string"
        },
        {
          "description": "JSON string of field name-value pairs",
          "name": "formData",
          "type": "string"
        }
      ],
      "returnType": "object"
    },
    {
      "description": "Enable or disable console logging for operations",
      "errorPattern": "No errors expected",
      "example": "pdf.call('setSilentMode', true); // Disable logging\npdf.call('setSilentMode', false); // Enable logging",
      "name": "setSilentMode",
      "parameters": [
        {
          "description": "True to enable silent mode, false to show logs",
          "name": "silent",
          "type": "boolean"
        }
      ],
      "returnType": "boolean"
    },
    {
      "description": "Get list of all available PDF functions",
      "errorPattern": "No errors expected",
      "example": "const functions = pdf.call('getAvailableFunctions');\nconsole.log('Available functions:', functions);",
      "name": "getAvailableFunctions",
      "parameters": [],
      "returnType": "array"
    }
  ],
  "gowmConfig": {
    "autoDetect": true,
    "errorPattern": "object-based",
    "preferredFilename": "main.wasm",
    "readySignal": "__gowm_ready",
    "standardFunctions": [
      "getAvailableFunctions",
      "setSilentMode"
    ],
    "supportedBranches": [
      "master",
      "stable"
    ]
  },
  "gzipSize": 1473002,
  "license": "MIT",
  "name": "pdf-wasm",
  "performance": {
    "features": [
      "Compiled WebAssembly for optimal performance",
      "Native Go PDF processing",
      "Efficient memory usage for large documents",
      "Silent mode for production environments",
      "Optimized for GoWM integration",
      "Streaming PDF processing"
    ]
  },
  "quality": {
    "documentation": "complete",
    "maintainability": "high",
    "stability": "stable",
    "testing": "comprehensive"
  },
  "security": {
    "features": [
      "Memory-safe Go implementation",
      "Input validation and sanitization",
      "Secure PDF data handling",
      "Base64 encoding for web compatibility",
      "No external network dependencies",
      "Sandboxed WebAssembly execution"
    ]
  },
  "size": 5185772,
  "tags": [
    "pdf",
    "document",
    "generation",
    "manipulation",
    "extraction",
    "watermark",
    "merge",
    "split",
    "invoice",
    "certificate",
    "table",
    "chart",
    "html-conversion",
    "markdown-conversion",
    "analysis",
    "optimization",
    "signature",
    "annotation",
    "form-filling",
    "business",
    "wasm",
    "go",
    "gowm"
  ],
  "types": [
    {
      "description": "Standard result type for PDF operations",
      "details": "Returns object with PDF data on success, or object with 'error' field on failure",
      "name": "PDFResult",
      "type": "object"
    },
    {
      "description": "PDF creation operation result",
      "name": "PDFCreationResult",
      "properties": {
        "error": "string (optional, present on failure)",
        "format": "string ('application/pdf')",
        "metadata": "object (PDF metadata)",
        "pages": "number (total number of pages)",
        "pdfData": "string (base64-encoded PDF data)",
        "size": "number (PDF size in bytes)"
      }
    },
    {
      "description": "Invoice generation result",
      "name": "InvoiceResult",
      "properties": {
        "currency": "string (currency symbol)",
        "error": "string (optional, present on failure)",
        "invoiceNumber": "string (generated invoice number)",
        "itemCount": "number (number of invoice items)",
        "pdfData": "string (base64-encoded PDF data)",
        "size": "number (PDF size in bytes)",
        "total": "number (total amount including tax)"
      }
    },
    {
      "description": "Certificate generation result",
      "name": "CertificateResult",
      "properties": {
        "certificateType": "string (type of certificate)",
        "error": "string (optional, present on failure)",
        "issueDate": "string (date of issuance)",
        "pdfData": "string (base64-encoded PDF data)",
        "recipient": "string (certificate recipient name)",
        "size": "number (PDF size in bytes)"
      }
    },
    {
      "description": "Table addition result",
      "name": "TableResult",
      "properties": {
        "columns": "number (number of table columns)",
        "error": "string (optional, present on failure)",
        "pdfData": "string (base64-encoded PDF data)",
        "rows": "number (number of table rows)",
        "size": "number (updated PDF size in bytes)",
        "tableType": "string (table formatting type)"
      }
    },
    {
      "description": "Chart addition result",
      "name": "ChartResult",
      "properties": {
        "chartType": "string (type of chart: bar, line, pie)",
        "dataPoints": "number (number of data points)",
        "error": "string (optional, present on failure)",
        "pdfData": "string (base64-encoded PDF data)",
        "size": "number (updated PDF size in bytes)",
        "title": "string (chart title)"
      }
    },
    {
      "description": "HTML/Markdown to PDF conversion result",
      "name": "ConversionResult",
      "properties": {
        "contentLength": "number (length of source content)",
        "error": "string (optional, present on failure)",
        "pages": "number (number of generated pages)",
        "pdfData": "string (base64-encoded PDF data)",
        "size": "number (PDF size in bytes)",
        "sourceType": "string (html or markdown)"
      }
    },
    {
      "description": "PDF analysis result",
      "name": "AnalysisResult",
      "properties": {
        "error": "string (optional, present on failure)",
        "fileSize": "number (PDF file size in bytes)",
        "fonts": "array (list of fonts used)",
        "images": "number (number of embedded images)",
        "metadata": "object (PDF metadata information)",
        "optimizationTips": "array (suggestions for optimization)",
        "pages": "number (total number of pages)",
        "text": "boolean (whether text is extractable)"
      }
    },
    {
      "description": "PDF optimization result",
      "name": "OptimizationResult",
      "properties": {
        "error": "string (optional, present on failure)",
        "level": "string (optimization level used)",
        "optimizations": "array (list of applied optimizations)",
        "optimizedSize": "number (optimized PDF size in bytes)",
        "originalSize": "number (original PDF size in bytes)",
        "pdfData": "string (base64-encoded optimized PDF data)",
        "savingsPercent": "number (percentage of space saved)"
      }
    },
    {
      "description": "Text/image extraction result",
      "name": "PDFExtractionResult",
      "properties": {
        "count": "number (number of extracted items)",
        "error": "string (optional, present on failure)",
        "images": "array (extracted image objects)",
        "pages": "number (number of processed pages)",
        "text": "string (extracted text content)"
      }
    },
    {
      "description": "PDF compression operation result",
      "name": "PDFCompressionResult",
      "properties": {
        "compressedSize": "number (compressed size in bytes)",
        "compressionLevel": "string (compression level used)",
        "compressionRatio": "number (compression ratio percentage)",
        "error": "string (optional, present on failure)",
        "originalSize": "number (original size in bytes)",
        "pdfData": "string (base64-encoded compressed PDF)"
      }
    },
    {
      "description": "Module information result",
      "name": "ModuleInfo",
      "properties": {
        "author": "string (module author)",
        "capabilities": "array (list of module capabilities)",
        "categories": "array (list of function categories)",
        "functions": "number (total number of functions)",
        "license": "string (module license)",
        "name": "string (module name)",
        "version": "string (module version)"
      }
    }
  ],
  "usageStats": {
    "averageCallTime": "5-50ms",
    "complexity": "intermediate",
    "concurrency": "thread-safe",
    "memoryUsage": "moderate"
  },
  "version": "0.1.0",
  "wasmConfig": {
    "filename": "main.wasm",
    "globalFunctions": true,
    "goWasmExecRequired": true,
    "memoryInitialPages": 512,
    "memoryMaximumPages": 2048,
    "readySignal": "__gowm_ready"
  }
}