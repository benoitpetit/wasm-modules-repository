{
    "name": "image-wasm",
    "description": "High-performance image processing module written in Go and compiled to WebAssembly",
    "version": "1.0.0",
    "author": "Ben",
    "license": "MIT",
    "tags": [
        "image",
        "processing",
        "compression",
        "resize",
        "wasm",
        "go"
    ],
    "functions": [
        {
            "name": "compressJPEG",
            "description": "Compress a JPEG image with specified quality",
            "parameters": [
                {
                    "name": "imageData",
                    "type": "Uint8Array",
                    "description": "Image data as Uint8Array"
                },
                {
                    "name": "quality",
                    "type": "number",
                    "description": "Compression quality (1-100)"
                }
            ],
            "returnType": "Uint8Array",
            "example": "const compressed = imageWasm.compressJPEG(imageData, 80);"
        },
        {
            "name": "compressPNG",
            "description": "Compress a PNG image",
            "parameters": [
                {
                    "name": "imageData",
                    "type": "Uint8Array",
                    "description": "Image data as Uint8Array"
                }
            ],
            "returnType": "Uint8Array",
            "example": "const compressed = imageWasm.compressPNG(imageData);"
        },
        {
            "name": "resizeImage",
            "description": "Resize an image",
            "parameters": [
                {
                    "name": "imageData",
                    "type": "Uint8Array",
                    "description": "Image data as Uint8Array"
                },
                {
                    "name": "newWidth",
                    "type": "number",
                    "description": "New width"
                },
                {
                    "name": "newHeight",
                    "type": "number",
                    "description": "New height"
                }
            ],
            "returnType": "Uint8Array",
            "example": "const resized = imageWasm.resizeImage(imageData, 800, 600);"
        },
        {
            "name": "convertToWebP",
            "description": "Convert an image to WebP format",
            "parameters": [
                {
                    "name": "imageData",
                    "type": "Uint8Array",
                    "description": "Image data as Uint8Array"
                },
                {
                    "name": "quality",
                    "type": "number",
                    "description": "WebP compression quality (1-100)"
                }
            ],
            "returnType": "Uint8Array",
            "example": "const webp = imageWasm.convertToWebP(imageData, 85);"
        },
        {
            "name": "getImageInfo",
            "description": "Get image information",
            "parameters": [
                {
                    "name": "imageData",
                    "type": "Uint8Array",
                    "description": "Image data as Uint8Array"
                }
            ],
            "returnType": "object",
            "example": "const info = imageWasm.getImageInfo(imageData); // {width, height, format}"
        },
        {
            "name": "setSilentMode",
            "description": "Enable/disable silent mode for logs",
            "parameters": [
                {
                    "name": "silent",
                    "type": "boolean",
                    "description": "true to enable silent mode, false to disable it"
                }
            ],
            "returnType": "boolean",
            "example": "imageWasm.setSilentMode(true);"
        },
        {
            "name": "getAvailableFunctions",
            "description": "Get list of all available functions in the module",
            "parameters": [],
            "returnType": "Array<string>",
            "example": "const functions = imageWasm.getAvailableFunctions(); // returns ['compressJPEG', 'compressPNG', 'convertToWebP', 'resizeImage', 'getImageInfo', 'getAvailableFunctions', 'setSilentMode']"
        }
    ],
    "types": [
        {
            "name": "ImageInfo",
            "description": "Image metadata and information",
            "properties": {
                "width": {
                    "type": "number",
                    "description": "Image width in pixels"
                },
                "height": {
                    "type": "number",
                    "description": "Image height in pixels"
                },
                "format": {
                    "type": "string",
                    "description": "Image format (jpeg, png, webp, etc.)"
                },
                "size": {
                    "type": "number",
                    "description": "Image file size in bytes"
                }
            }
        },
        {
            "name": "ProcessingOptions",
            "description": "Image processing configuration options",
            "properties": {
                "quality": {
                    "type": "number",
                    "description": "Compression quality (1-100)"
                },
                "width": {
                    "type": "number",
                    "description": "Target width for resizing"
                },
                "height": {
                    "type": "number",
                    "description": "Target height for resizing"
                },
                "preserveAspectRatio": {
                    "type": "boolean",
                    "description": "Whether to maintain aspect ratio during resize"
                }
            }
        },
        {
            "name": "ImageError",
            "description": "Image processing error",
            "properties": {
                "message": {
                    "type": "string",
                    "description": "Error message describing the issue"
                },
                "operation": {
                    "type": "string",
                    "description": "The operation that caused the error"
                },
                "inputSize": {
                    "type": "number",
                    "description": "Size of the input data that caused the error"
                }
            }
        }
    ],
    "security": {
        "features": [
            "Input validation for image data",
            "Memory-safe image processing",
            "Bounds checking for resize operations",
            "Safe format conversion",
            "No external dependencies",
            "Buffer overflow protection",
            "Malformed image detection"
        ],
        "cors": "N/A - Image processing only",
        "ssl": "N/A - No network operations"
    },
    "compatibility": {
        "browsers": [
            "Chrome 57+",
            "Firefox 52+",
            "Safari 11+",
            "Edge 16+"
        ],
        "gowm": "Compatible with gowm npm package manager",
        "formats": [
            "JPEG",
            "PNG",
            "WebP"
        ]
    },
    "performance": {
        "features": [
            "Compiled WebAssembly for optimal performance",
            "Native Go image processing libraries",
            "Memory-efficient processing",
            "Concurrent processing capabilities",
            "Optimized compression algorithms",
            "Fast format conversion",
            "Minimal memory allocation"
        ]
    },
    "examples": [
        {
            "title": "JPEG Image Compression",
            "code": "// Loading the WASM module\nconst go = new Go();\nconst result = await WebAssembly.instantiateStreaming(fetch('main.wasm'), go.importObject);\ngo.run(result.instance);\n\n// Compress JPEG with quality control\nconst fileInput = document.querySelector('input[type=\"file\"]');\nfileInput.addEventListener('change', async (e) => {\n  const file = e.target.files[0];\n  const arrayBuffer = await file.arrayBuffer();\n  const imageData = new Uint8Array(arrayBuffer);\n  \n  // Compress at 80% quality\n  const compressed = compressJPEG(imageData, 80);\n  \n  // Create download link\n  const blob = new Blob([compressed], { type: 'image/jpeg' });\n  const url = URL.createObjectURL(blob);\n  console.log('Compressed image ready:', url);\n});"
        },
        {
            "title": "Image Resizing and Info",
            "code": "// Get image information first\nconst info = getImageInfo(imageData);\nconsole.log(`Original: ${info.width}x${info.height} (${info.format})`);\n\n// Resize to specific dimensions\nconst resized = resizeImage(imageData, 800, 600);\n\n// Verify the new size\nconst resizedInfo = getImageInfo(resized);\nconsole.log(`Resized: ${resizedInfo.width}x${resizedInfo.height}`);\n\n// Save as PNG\nconst blob = new Blob([resized], { type: 'image/png' });\nconst resizedUrl = URL.createObjectURL(blob);"
        },
        {
            "title": "WebP Conversion Pipeline",
            "code": "// Enable silent mode for batch processing\nsetSilentMode(true);\n\n// Complete conversion pipeline\nasync function convertToWebPPipeline(imageFile) {\n  const arrayBuffer = await imageFile.arrayBuffer();\n  const imageData = new Uint8Array(arrayBuffer);\n  \n  // Get original info\n  const originalInfo = getImageInfo(imageData);\n  \n  // Resize if too large (max 1920px width)\n  let processedData = imageData;\n  if (originalInfo.width > 1920) {\n    const aspectRatio = originalInfo.height / originalInfo.width;\n    const newHeight = Math.round(1920 * aspectRatio);\n    processedData = resizeImage(imageData, 1920, newHeight);\n  }\n  \n  // Convert to WebP with high quality\n  const webpData = convertToWebP(processedData, 90);\n  \n  return {\n    data: webpData,\n    originalSize: originalInfo.size,\n    newSize: webpData.length,\n    compressionRatio: (webpData.length / originalInfo.size * 100).toFixed(1)\n  };\n}\n\nsetSilentMode(false);"
        },
        {
            "title": "Batch Image Processing",
            "code": "// Process multiple images efficiently\nsetSilentMode(true);\n\nasync function batchProcess(files, options = {}) {\n  const results = [];\n  \n  for (const file of files) {\n    try {\n      const arrayBuffer = await file.arrayBuffer();\n      const imageData = new Uint8Array(arrayBuffer);\n      \n      // Get info\n      const info = getImageInfo(imageData);\n      \n      // Apply processing based on format\n      let processed;\n      if (info.format === 'jpeg') {\n        processed = compressJPEG(imageData, options.quality || 85);\n      } else if (info.format === 'png') {\n        processed = compressPNG(imageData);\n      } else {\n        processed = convertToWebP(imageData, options.quality || 90);\n      }\n      \n      results.push({\n        filename: file.name,\n        original: info,\n        processed: new Blob([processed]),\n        compressionRatio: ((processed.length / info.size) * 100).toFixed(1) + '%'\n      });\n    } catch (error) {\n      console.error(`Failed to process ${file.name}:`, error);\n    }\n  }\n  \n  return results;\n}\n\nsetSilentMode(false);"
        }
    ],
    "buildInfo": {
        "language": "Go",
        "target": "js/wasm",
        "buildCommand": "./build.sh",
        "outputFile": "main.wasm",
        "goModule": true,
        "buildTime": "Generated during build process",
        "compilerFlags": [
            "GOOS=js",
            "GOARCH=wasm"
        ],
        "dependencies": [
            "image/jpeg",
            "image/png"
        ]
    },
    "dependencies": [],
    "wasmConfig": {
        "filename": "main.wasm",
        "goWasmExecRequired": true,
        "globalFunctions": true,
        "memoryInitialPages": 512,
        "memoryMaximumPages": 2048
    }
}