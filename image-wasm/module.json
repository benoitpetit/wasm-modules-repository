{
  "author": "Ben",
  "buildInfo": {
    "buildCommand": "wasm-manager build",
    "buildTime": "2025-06-18T23:27:48+02:00",
    "compilerFlags": [
      "GOOS=js",
      "GOARCH=wasm",
      "CGO_ENABLED=0",
      "-ldflags=-s -w -buildid=",
      "-trimpath",
      "-buildmode=default",
      "-tags=netgo,osusergo",
      "-a",
      "-gcflags=-l=4 -B",
      "wasm-opt=-Oz --enable-bulk-memory"
    ],
    "goModule": true,
    "goVersion": "1.24.3",
    "language": "Go",
    "lastModified": "2025-06-18T23:27:46+02:00",
    "outputFile": "main.wasm",
    "target": "js/wasm",
    "wasmOptUsed": true
  },
  "buildTime": 1750282068,
  "changelog": {
    "changes": [
      "Multi-format image processing support",
      "JPEG/PNG compression with quality control",
      "WebP conversion for modern browsers",
      "Image resizing with aspect ratio preservation",
      "Added rotation and cropping capabilities",
      "Base64 input/output for web compatibility"
    ],
    "releaseDate": "2025-06-17",
    "version": "0.2.1"
  },
  "compatibility": {
    "browsers": [
      "Chrome 57+",
      "Firefox 52+",
      "Safari 11+",
      "Edge 16+"
    ],
    "gowm": "1.0.0+",
    "nodejs": "14.0.0+"
  },
  "description": "WebAssembly module for image processing, compression, and format conversion",
  "ecosystem": {
    "category": "media",
    "industry": [
      "e-commerce",
      "media",
      "photography",
      "web-development"
    ],
    "relatedModules": [
      "crypto-wasm"
    ],
    "subcategory": "image-processing",
    "useCase": [
      "image-optimization",
      "format-conversion",
      "thumbnail-generation",
      "photo-editing"
    ]
  },
  "errorHandling": {
    "description": "Image module returns objects with 'error' field when operations fail",
    "detection": "if (result.error) { /* handle error */ } else { /* use result data */ }",
    "examples": [
      {
        "cause": "Called processing function with unsupported image format",
        "error": "Invalid image format"
      },
      {
        "cause": "Called resizeImage() with dimensions exceeding limits",
        "error": "Image dimensions too large"
      },
      {
        "cause": "Called compression function with invalid quality value",
        "error": "Quality parameter out of range (1-100)"
      }
    ],
    "pattern": "object-based"
  },
  "examples": [
    {
      "code": "import { loadFromGitHub } from 'gowm';\n\n// Load image module from wasm-modules-repository\nconst image = await loadFromGitHub('benoitpetit/wasm-modules-repository', {\n  path: 'image-wasm',\n  filename: 'main.wasm',\n  name: 'image-wasm',\n  branch: 'master'\n});\n\n// Configure module\nimage.call('setSilentMode', true);\n\n// Convert file to base64\nconst fileInput = document.getElementById('imageFile');\nconst file = fileInput.files[0];\nconst base64 = await fileToBase64(file);\n\n// Compress JPEG with error handling\nconst result = image.call('compressJPEG', base64, 80);\nif (result.error) {\n  console.error('Compression failed:', result.error);\n} else {\n  console.log('Original size:', result.originalSize, 'bytes');\n  console.log('Compressed size:', result.newSize, 'bytes');\n  console.log('Compression ratio:', result.compressionRatio);\n}\n\n// Helper function\nfunction fileToBase64(file) {\n  return new Promise((resolve, reject) =\u003e {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () =\u003e resolve(reader.result.split(',')[1]);\n    reader.onerror = error =\u003e reject(error);\n  });\n}",
      "language": "javascript",
      "title": "GoWM Integration - Basic Image Compression"
    },
    {
      "code": "// Complete image processing workflow\nasync function processImage(base64ImageData) {\n  // Get original image info\n  const info = image.call('getImageInfo', base64ImageData);\n  if (info.error) {\n    throw new Error('Failed to get image info: ' + info.error);\n  }\n  \n  console.log('Original: ' + info.width + 'x' + info.height + ', ' + info.format + ', ' + info.size + ' bytes');\n  \n  // Resize if too large\n  let processedImage = base64ImageData;\n  if (info.width \u003e 1920 || info.height \u003e 1080) {\n    const resizeResult = image.call('resizeImage', processedImage, 1920, 1080);\n    if (resizeResult.error) {\n      throw new Error('Resize failed: ' + resizeResult.error);\n    }\n    processedImage = resizeResult.processedImage;\n    console.log('Resized to: ' + resizeResult.width + 'x' + resizeResult.height);\n  }\n  \n  // Convert to WebP for better compression\n  const webpResult = image.call('convertToWebP', processedImage, 85);\n  if (webpResult.error) {\n    throw new Error('WebP conversion failed: ' + webpResult.error);\n  }\n  \n  console.log('Final WebP: ' + webpResult.newSize + ' bytes (' + webpResult.compressionRatio + '% of original)');\n  return webpResult.processedImage;\n}",
      "language": "javascript",
      "title": "Image Processing Pipeline"
    },
    {
      "code": "// Helper function for consistent image processing error handling\nfunction handleImageResult(result, successCallback, errorCallback) {\n  if (result.error) {\n    errorCallback(result.error);\n  } else {\n    successCallback(result);\n  }\n}\n\n// Batch image processing with error handling\nconst images = [base64Image1, base64Image2, base64Image3];\nconst operations = [\n  { func: 'compressJPEG', args: [80] },\n  { func: 'convertToWebP', args: [85] },\n  { func: 'resizeImage', args: [800, 600] }\n];\n\nimages.forEach((imageData, imageIndex) =\u003e {\n  operations.forEach(({ func, args }, opIndex) =\u003e {\n    const result = image.call(func, imageData, ...args);\n    handleImageResult(\n      result,\n      (data) =\u003e {\n        console.log('Image ' + (imageIndex + 1) + ', ' + func + ': Success');\n        console.log('  Original: ' + data.originalSize + ' bytes, New: ' + data.newSize + ' bytes');\n        console.log('  Compression: ' + data.compressionRatio + '%');\n      },\n      (error) =\u003e {\n        console.error('Image ' + (imageIndex + 1) + ', ' + func + ' failed: ' + error);\n      }\n    );\n  });\n});",
      "language": "javascript",
      "title": "Error Handling Patterns"
    }
  ],
  "fileInfo": {
    "binarySize": "2.8 MB",
    "compressedSize": "844.3 KB",
    "compressionRatio": "70%",
    "sourceLines": 223
  },
  "functions": [
    {
      "description": "Compress JPEG image with specified quality",
      "errorPattern": "Returns object with 'error' field on failure",
      "example": "const result = image.call('compressJPEG', base64Data, 80);",
      "name": "compressJPEG",
      "parameters": [
        {
          "description": "Base64 encoded image data",
          "name": "imageData",
          "type": "string"
        },
        {
          "description": "Quality level (1-100)",
          "name": "quality",
          "type": "number"
        }
      ],
      "returnType": "object"
    },
    {
      "description": "Convert image to WebP format",
      "errorPattern": "Returns object with 'error' field on failure",
      "example": "const result = image.call('convertToWebP', base64Data, 85);",
      "name": "convertToWebP",
      "parameters": [
        {
          "description": "Base64 encoded image data",
          "name": "imageData",
          "type": "string"
        },
        {
          "description": "Quality level (1-100)",
          "name": "quality",
          "type": "number"
        }
      ],
      "returnType": "object"
    },
    {
      "description": "Resize image to specified dimensions",
      "errorPattern": "Returns object with 'error' field on failure",
      "example": "const result = image.call('resizeImage', base64Data, 800, 600);",
      "name": "resizeImage",
      "parameters": [
        {
          "description": "Base64 encoded image data",
          "name": "imageData",
          "type": "string"
        },
        {
          "description": "Target width in pixels",
          "name": "width",
          "type": "number"
        },
        {
          "description": "Target height in pixels",
          "name": "height",
          "type": "number"
        }
      ],
      "returnType": "object"
    },
    {
      "description": "Get image metadata and information",
      "errorPattern": "Returns object with 'error' field on failure",
      "example": "const info = image.call('getImageInfo', base64Data);",
      "name": "getImageInfo",
      "parameters": [
        {
          "description": "Base64 encoded image data",
          "name": "imageData",
          "type": "string"
        }
      ],
      "returnType": "object"
    },
    {
      "description": "Enable/disable silent mode for console logs",
      "example": "image.call('setSilentMode', true);",
      "name": "setSilentMode",
      "parameters": [
        {
          "description": "true to enable silent mode, false to disable it",
          "name": "silent",
          "type": "boolean"
        }
      ],
      "returnType": "boolean"
    },
    {
      "description": "Get list of all available functions in the module",
      "example": "const functions = image.call('getAvailableFunctions');",
      "name": "getAvailableFunctions",
      "parameters": [],
      "returnType": "Array\u003cstring\u003e"
    }
  ],
  "gowmConfig": {
    "autoDetect": true,
    "errorPattern": "object-based",
    "preferredFilename": "main.wasm",
    "readySignal": "__gowm_ready",
    "standardFunctions": [
      "getAvailableFunctions",
      "setSilentMode"
    ],
    "supportedBranches": [
      "master",
      "stable"
    ]
  },
  "gzipSize": 864529,
  "license": "MIT",
  "name": "image-wasm",
  "performance": {
    "features": [
      "Compiled WebAssembly for optimal performance",
      "Native Go image processing libraries",
      "Efficient memory usage",
      "Silent mode for production environments",
      "Optimized for GoWM integration",
      "Hardware-accelerated operations where available"
    ]
  },
  "quality": {
    "documentation": "complete",
    "maintainability": "high",
    "stability": "stable",
    "testing": "comprehensive"
  },
  "security": {
    "features": [
      "Input validation for image data",
      "Memory-safe image processing",
      "Bounds checking for resize operations",
      "Safe format conversion",
      "Buffer overflow protection",
      "Malformed image detection",
      "Resource limit enforcement"
    ]
  },
  "size": 2905073,
  "tags": [
    "image",
    "compression",
    "webp",
    "jpeg",
    "png",
    "processing",
    "gowm"
  ],
  "types": [
    {
      "description": "Standard result type for image operations",
      "details": "Returns object with processed image data on success, or object with 'error' field on failure",
      "name": "ImageResult",
      "type": "object"
    },
    {
      "description": "Image metadata and information",
      "name": "ImageInfo",
      "properties": {
        "error": "string (optional, present on failure)",
        "format": "string (image format: jpeg, png, webp, etc.)",
        "height": "number (image height in pixels)",
        "size": "number (image file size in bytes)",
        "width": "number (image width in pixels)"
      }
    },
    {
      "description": "Image processing operation result",
      "name": "ProcessingResult",
      "properties": {
        "compressionRatio": "number (compression ratio)",
        "error": "string (optional, present on failure)",
        "format": "string (output format)",
        "height": "number (image height)",
        "newSize": "number (processed size in bytes)",
        "originalSize": "number (original size in bytes)",
        "processedImage": "string (base64-encoded processed image)",
        "width": "number (image width)"
      }
    }
  ],
  "usageStats": {
    "averageCallTime": "10-100ms",
    "complexity": "intermediate",
    "concurrency": "limited",
    "memoryUsage": "high"
  },
  "version": "0.2.1",
  "wasmConfig": {
    "filename": "main.wasm",
    "globalFunctions": true,
    "goWasmExecRequired": true,
    "memoryInitialPages": 512,
    "memoryMaximumPages": 2048,
    "readySignal": "__gowm_ready"
  }
}